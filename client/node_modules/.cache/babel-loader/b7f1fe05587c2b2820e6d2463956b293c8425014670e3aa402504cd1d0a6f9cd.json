{"ast":null,"code":"/*! async-each - MIT License (c) 2016 Paul Miller (paulmillr.com) */\n(function (globals) {\n  'use strict';\n\n  var each = function each(items, next, callback) {\n    if (!Array.isArray(items)) throw new TypeError('each() expects array as first argument');\n    if (typeof next !== 'function') throw new TypeError('each() expects function as second argument');\n    if (typeof callback !== 'function') callback = Function.prototype; // no-op\n\n    var total = items.length;\n    if (total === 0) return callback(undefined, items);\n    var transformed = new Array(total);\n    var transformedCount = 0;\n    var returned = false;\n    items.forEach(function (item, index) {\n      next(item, function (error, transformedItem) {\n        if (returned) return;\n        if (error) {\n          returned = true;\n          return callback(error);\n        }\n        transformed[index] = transformedItem;\n        transformedCount += 1; // can't use index: last item could take more time\n        if (transformedCount === total) return callback(undefined, transformed);\n      });\n    });\n  };\n  if (typeof define !== 'undefined' && define.amd) {\n    define([], function () {\n      return each;\n    }); // RequireJS\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = each; // CommonJS\n  } else {\n    globals.asyncEach = each; // <script>\n  }\n})(this);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}