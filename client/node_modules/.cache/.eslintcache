[{"/root/Web/web-simul/client/src/index.js":"1","/root/Web/web-simul/client/src/layouts/Auth.js":"2","/root/Web/web-simul/client/src/layouts/Admin.js":"3","/root/Web/web-simul/client/src/components/Navbars/AdminNavbar.js":"4","/root/Web/web-simul/client/src/components/Navbars/AuthNavbar.js":"5","/root/Web/web-simul/client/src/components/Footers/AuthFooter.js":"6","/root/Web/web-simul/client/src/components/Footers/AdminFooter.js":"7","/root/Web/web-simul/client/src/components/Sidebar/Sidebar.js":"8","/root/Web/web-simul/client/src/routes.js":"9","/root/Web/web-simul/client/src/views/examples/Maps.js":"10","/root/Web/web-simul/client/src/views/examples/Register.js":"11","/root/Web/web-simul/client/src/views/examples/Login.js":"12","/root/Web/web-simul/client/src/views/examples/Profile.js":"13","/root/Web/web-simul/client/src/views/examples/Icons.js":"14","/root/Web/web-simul/client/src/components/Headers/Header.js":"15","/root/Web/web-simul/client/src/components/Headers/UserHeader.js":"16","/root/Web/web-simul/client/src/variables/charts.js":"17","/root/Web/web-simul/client/src/views/examples/Tables.js":"18","/root/Web/web-simul/client/src/views/Workbench.js":"19","/root/Web/web-simul/client/src/views/examples/Ssh.js":"20","/root/Web/web-simul/client/src/views/examples/Energy.js":"21","/root/Web/web-simul/client/src/views/examples/Assistant.js":"22","/root/Web/web-simul/client/src/views/examples/Pushdown.js":"23","/root/Web/web-simul/client/src/views/examples/Users.js":"24","/root/Web/web-simul/client/src/views/examples/App.js":"25","/root/Web/web-simul/client/src/components/Headers/Header2.js":"26","/root/Web/web-simul/client/src/views/examples/Option.js":"27","/root/Web/workbench/client/src/index.js":"28","/root/Web/workbench/client/src/layouts/Admin.js":"29","/root/Web/workbench/client/src/layouts/Auth.js":"30","/root/Web/workbench/client/src/components/Footers/AuthFooter.js":"31","/root/Web/workbench/client/src/components/Navbars/AdminNavbar.js":"32","/root/Web/workbench/client/src/components/Footers/AdminFooter.js":"33","/root/Web/workbench/client/src/components/Sidebar/Sidebar.js":"34","/root/Web/workbench/client/src/components/Navbars/AuthNavbar.js":"35","/root/Web/workbench/client/src/routes.js":"36","/root/Web/workbench/client/src/views/Workbench.js":"37","/root/Web/workbench/client/src/views/examples/Assistant.js":"38","/root/Web/workbench/client/src/views/examples/Energy.js":"39","/root/Web/workbench/client/src/views/examples/Pushdown.js":"40","/root/Web/workbench/client/src/components/Headers/Header.js":"41","/root/Web/workbench/client/src/components/Headers/Header2.js":"42","/root/Web/workbench/client/src/variables/charts.js":"43"},{"size":1350,"mtime":1684739884237,"results":"44","hashOfConfig":"45"},{"size":3254,"mtime":1683092310588,"results":"46","hashOfConfig":"45"},{"size":2529,"mtime":1685523491248,"results":"47","hashOfConfig":"45"},{"size":3161,"mtime":1685523483848,"results":"48","hashOfConfig":"45"},{"size":3491,"mtime":1683520043708,"results":"49","hashOfConfig":"45"},{"size":2736,"mtime":1683092310588,"results":"50","hashOfConfig":"45"},{"size":1107,"mtime":1683511213843,"results":"51","hashOfConfig":"45"},{"size":9373,"mtime":1685523488144,"results":"52","hashOfConfig":"45"},{"size":2219,"mtime":1685521497389,"results":"53","hashOfConfig":"45"},{"size":3488,"mtime":1683092310588,"results":"54","hashOfConfig":"45"},{"size":5566,"mtime":1684292190376,"results":"55","hashOfConfig":"45"},{"size":5085,"mtime":1683092310588,"results":"56","hashOfConfig":"45"},{"size":12395,"mtime":1683092310588,"results":"57","hashOfConfig":"45"},{"size":113267,"mtime":1683092310588,"results":"58","hashOfConfig":"45"},{"size":792,"mtime":1685523476484,"results":"59","hashOfConfig":"45"},{"size":1918,"mtime":1683092310588,"results":"60","hashOfConfig":"45"},{"size":17019,"mtime":1684459674252,"results":"61","hashOfConfig":"45"},{"size":67856,"mtime":1683092310588,"results":"62","hashOfConfig":"45"},{"size":10012,"mtime":1685521820601,"results":"63","hashOfConfig":"45"},{"size":9365,"mtime":1684303119730,"results":"64","hashOfConfig":"45"},{"size":50405,"mtime":1684741827862,"results":"65","hashOfConfig":"45"},{"size":16614,"mtime":1684742017434,"results":"66","hashOfConfig":"45"},{"size":26839,"mtime":1685523471016,"results":"67","hashOfConfig":"45"},{"size":1380,"mtime":1684138205604,"results":"68","hashOfConfig":"45"},{"size":117,"mtime":1683681253227,"results":"69","hashOfConfig":"45"},{"size":795,"mtime":1684732016045,"results":"70","hashOfConfig":"45"},{"size":10676,"mtime":1684742829611,"results":"71","hashOfConfig":"45"},{"size":1350,"mtime":1688525923938,"results":"72","hashOfConfig":"73"},{"size":2197,"mtime":1688451376802,"results":"74","hashOfConfig":"73"},{"size":3254,"mtime":1685523642828,"results":"75","hashOfConfig":"73"},{"size":2736,"mtime":1685523642816,"results":"76","hashOfConfig":"73"},{"size":1620,"mtime":1688451480487,"results":"77","hashOfConfig":"73"},{"size":1107,"mtime":1685523642816,"results":"78","hashOfConfig":"73"},{"size":9373,"mtime":1687339839817,"results":"79","hashOfConfig":"73"},{"size":3491,"mtime":1685523642824,"results":"80","hashOfConfig":"73"},{"size":1238,"mtime":1689051814273,"results":"81","hashOfConfig":"73"},{"size":10346,"mtime":1689050125562,"results":"82","hashOfConfig":"73"},{"size":16614,"mtime":1686274111798,"results":"83","hashOfConfig":"73"},{"size":63195,"mtime":1689050184676,"results":"84","hashOfConfig":"73"},{"size":51262,"mtime":1689051846760,"results":"85","hashOfConfig":"73"},{"size":3200,"mtime":1687166363107,"results":"86","hashOfConfig":"73"},{"size":795,"mtime":1685523642816,"results":"87","hashOfConfig":"73"},{"size":25848,"mtime":1688978468310,"results":"88","hashOfConfig":"73"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1blfqhj",{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"j9vn3k",{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"174"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"174"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"174"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"174"},"/root/Web/web-simul/client/src/index.js",[],[],"/root/Web/web-simul/client/src/layouts/Auth.js",[],[],[],"/root/Web/web-simul/client/src/layouts/Admin.js",[],[],"/root/Web/web-simul/client/src/components/Navbars/AdminNavbar.js",["227","228","229","230","231","232"],[],"/root/Web/web-simul/client/src/components/Navbars/AuthNavbar.js",[],[],"/root/Web/web-simul/client/src/components/Footers/AuthFooter.js",[],["233"],"/root/Web/web-simul/client/src/components/Footers/AdminFooter.js",[],["234","235","236","237"],"/root/Web/web-simul/client/src/components/Sidebar/Sidebar.js",[],["238","239","240","241","242","243","244","245","246","247","248"],"/root/Web/web-simul/client/src/routes.js",["249","250"],[],"/root/Web/web-simul/client/src/views/examples/Maps.js",[],[],"/root/Web/web-simul/client/src/views/examples/Register.js",[],[],"/root/Web/web-simul/client/src/views/examples/Login.js",[],[],"/root/Web/web-simul/client/src/views/examples/Profile.js",[],[],"/root/Web/web-simul/client/src/views/examples/Icons.js",[],[],"/root/Web/web-simul/client/src/components/Headers/Header.js",[],[],"/root/Web/web-simul/client/src/components/Headers/UserHeader.js",[],[],"/root/Web/web-simul/client/src/variables/charts.js",[],["251"],"/root/Web/web-simul/client/src/views/examples/Tables.js",[],[],"/root/Web/web-simul/client/src/views/Workbench.js",[],[],"/root/Web/web-simul/client/src/views/examples/Ssh.js",[],[],"/root/Web/web-simul/client/src/views/examples/Energy.js",[],[],"/root/Web/web-simul/client/src/views/examples/Assistant.js",[],[],"/root/Web/web-simul/client/src/views/examples/Pushdown.js",[],[],"/root/Web/web-simul/client/src/views/examples/Users.js",[],[],"/root/Web/web-simul/client/src/views/examples/App.js",[],[],"/root/Web/web-simul/client/src/components/Headers/Header2.js",[],[],"/root/Web/web-simul/client/src/views/examples/Option.js",[],[],"/root/Web/workbench/client/src/index.js",[],[],[],"/root/Web/workbench/client/src/layouts/Admin.js",["252","253","254"],[],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport { useLocation, Route, Switch, Redirect } from \"react-router-dom\";\n// reactstrap components\nimport { Container } from \"reactstrap\";\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\nimport AdminFooter from \"components/Footers/AdminFooter.js\";\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\n\nimport routes from \"routes.js\";\n\nconst Admin = (props) => {\n  const mainContent = React.useRef(null);\n  const location = useLocation();\n\n  React.useEffect(() => {\n    document.documentElement.scrollTop = 0;\n    document.scrollingElement.scrollTop = 0;\n    mainContent.current.scrollTop = 0;\n  }, [location]);\n\n  const getRoutes = (routes) => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n\n  const getBrandText = (path) => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        props.location.pathname.indexOf(routes[i].layout + routes[i].path) !==\n        -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n\n  return (\n    <>\n      <div className=\"main-content\" ref={mainContent}>\n        <Switch>\n          {getRoutes(routes)}\n          <Redirect from=\"*\" to=\"/admin/workbench\" />\n        </Switch>\n        <Container fluid>\n          <AdminFooter />\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default Admin;\n","/root/Web/workbench/client/src/layouts/Auth.js",[],[],"/root/Web/workbench/client/src/components/Footers/AuthFooter.js",[],["255"],"/root/Web/workbench/client/src/components/Navbars/AdminNavbar.js",["256","257","258","259","260","261","262","263","264","265","266","267","268"],[],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  Form,\n  FormGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n  InputGroup,\n  Navbar,\n  Col,\n  Nav,\n  Container,\n  Media,\n} from \"reactstrap\";\n\nconst AdminNavbar = (props) => {\n  return (\n    <>\n      <Col xl=\"1\">\n        <Navbar className=\"navbar-top ml-2\" expand=\"md\" id=\"navbar-main\">\n          <Link className=\"h1 mr-2\" to=\"admin/workbench\">\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/home.png\")}\n              alt=\"...\"\n            />\n          </Link>\n          <Link className=\"h1 mr-3 mt-2\" to=\"/admin/energy\">\n            <i className=\"ni ni-button-power\"></i>\n          </Link>\n          <Link className=\"h1 mr-2 mt-2\" to=\"/admin/pushdown\">\n            <i className=\"ni ni-chart-bar-32\"></i>\n          </Link>\n        </Navbar>\n      </Col>\n    </>\n  );\n};\n\nexport default AdminNavbar;\n","/root/Web/workbench/client/src/components/Footers/AdminFooter.js",[],["269","270","271","272"],"/root/Web/workbench/client/src/components/Sidebar/Sidebar.js",[],["273","274","275","276","277","278","279","280","281","282","283"],"/root/Web/workbench/client/src/components/Navbars/AuthNavbar.js",[],[],"/root/Web/workbench/client/src/routes.js",[],[],"/root/Web/workbench/client/src/views/Workbench.js",["284","285","286","287","288","289"],[],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\n// reactstrap components\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  CardBody,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Input,\n} from \"reactstrap\";\n\n// core components\n\nimport Header from \"components/Headers/Header.js\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\n\n//For Demo\n\nconst Workbench = (props) => {\n  const [locate, setLocate] = useState(\"Local\");\n  const [dbms, setDbms] = useState(\"RDBMS\");\n  const [host, setHost] = useState(\"\");\n  const [port, setPort] = useState(\"\");\n  const history = useHistory();\n\n  const handleSubmitDemo = async (e) => {\n    e.preventDefault();\n\n    try {\n      // 로그인 정보를 서버로 전송\n      const response = await axios.post(\n        \"http://10.0.5.123:40400/admin/workbench\",\n        {\n          dbms: dbms,\n          host: host,\n          port: port,\n          demo: \"O\",\n        }\n      );\n      history.push(\"/admin/energy\");\n      // 로그인 성공 시 처리\n      // 예: 로그인 상태를 관리하는 상태(State) 업데이트 또는 리다이렉트\n    } catch (error) {\n      console.error(error);\n      // 로그인 실패 시 처리\n      // 예: 오류 메시지 표시 또는 로그인 실패 상태(State) 업데이트\n    }\n  };\n  const handleSubmitSignin = async (e) => {\n    e.preventDefault();\n\n    try {\n      // 로그인 정보를 서버로 전송\n      const response = await axios.post(\n        \"http://10.0.5.123:40400/admin/workbench\",\n        {\n          dbms: dbms,\n          host: host,\n          port: port,\n          demo: \"X\",\n        }\n      );\n\n      history.push(\"/admin/energy\");\n      // 로그인 성공 시 처리\n      // 예: 로그인 상태를 관리하는 상태(State) 업데이트 또는 리다이렉트\n    } catch (error) {\n      console.error(error);\n      // 로그인 실패 시 처리\n      // 예: 오류 메시지 표시 또는 로그인 실패 상태(State) 업데이트\n    }\n  };\n\n  return (\n    <>\n      <Row className=\"header my-4 align-items-center justify-content-center\">\n        <Button\n          className=\"mx-2 btn-demo text-lg\"\n          color=\"warning\"\n          size=\"lg\"\n          type=\"button\"\n          value={\"Workbench\"}\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../assets/img/icons/demo/workbench.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}Workbench\n        </Button>\n        <i className=\"ni ni-bold-right\"></i>\n        <Button\n          className={`mx-2 bg-yellow text-white btn-demo  text-lg`}\n          size=\"lg\"\n          type=\"button\"\n          value={\"Simulator\"}\n          disabled\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../assets/img/icons/demo/simul.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}Simulator\n        </Button>\n        <i className=\"ni ni-bold-right\"></i>\n        <Button\n          className={`mx-2 btn-demo  text-lg`}\n          color=\"primary\"\n          size=\"lg\"\n          type=\"button\"\n          value={\"DB Connect Instance\"}\n          disabled\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../assets/img/icons/demo/dbc.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}DB Connect Instance\n        </Button>\n        <i className=\"ni ni-bold-right\"></i>\n        <Col xl=\"2\" className=\"text-center px-0\">\n          <Button\n            className={`mx-2 btn-demo text-lg mb-1`}\n            color=\"danger\"\n            size=\"lg\"\n            type=\"button\"\n            value={\"Storage Engine Instance\"}\n            disabled\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../assets/img/icons/demo/se.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}Storage Engine Instance\n          </Button>\n          <Button\n            className={`mx-2 bg-purple text-white btn-demo  text-lg`}\n            size=\"lg\"\n            type=\"button\"\n            value={\"CSD Pushdown Work\"}\n            disabled\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../assets/img/icons/demo/csd.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}CSD Pushdown Work\n          </Button>\n        </Col>\n        <i className=\"ni ni-bold-right\"></i>\n        <Button\n          className=\"mx-2 btn-demo  text-lg\"\n          color=\"info\"\n          size=\"lg\"\n          type=\"button\"\n          value={\"Result\"}\n          disabled\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../assets/img/icons/demo/workbench.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}Workbench\n        </Button>\n        <div>\n          <span className=\"text-lg font-weight-bolder text-darker\">\n            For Demo\n          </span>\n        </div>\n      </Row>\n      <AdminNavbar />\n      <Header />\n      {/* Page content */}\n      <Container className=\"mt--7\" fluid>\n        <Row className=\"justify-content-center mt-9\">\n          <img src={require(\"../assets/img/brand/logo.png\")} alt=\"...\" />\n        </Row>\n        <Row className=\"mt-5 justify-content-center\">\n          <Col xl=\"6\">\n            <Card className=\"shadow\">\n              <CardHeader className=\"border-1 bg-primary\">\n                <Row className=\"align-items-center\">\n                  <div className=\"col text-center\">\n                    <h1 className=\" text-white\">Login</h1>\n                  </div>\n                </Row>\n              </CardHeader>\n              <CardBody className=\"px-lg-5 py-lg-5\">\n                <Form role=\"form\">\n                  <FormGroup>\n                    <div className=\"custom-control custom-control-alternative custom-radio mb-3 align-self-auto\">\n                      <Input\n                        className=\"custom-control-input\"\n                        defaultChecked\n                        id=\"RDBMS\"\n                        name=\"DBMS\"\n                        type=\"radio\"\n                        value={\"RDBMS\"}\n                        onChange={(e) => setDbms(e.target.value)}\n                      />\n                      <label\n                        className=\"custom-control-label text-xl font-weight-bold\"\n                        htmlFor=\"RDBMS\"\n                      >\n                        RDBMS\n                      </label>\n                    </div>\n                  </FormGroup>\n                  <FormGroup className=\"mb-3\">\n                    <InputGroup className=\"input-group-alternative\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                          <i className=\"ni ni-circle-08\" />\n                        </InputGroupText>\n                      </InputGroupAddon>\n                      <Input\n                        placeholder=\"Host\"\n                        type=\"text\"\n                        autoComplete=\"new-Host\"\n                        onChange={(e) => setHost(e.target.value)}\n                      />\n                    </InputGroup>\n                  </FormGroup>\n                  <FormGroup>\n                    <InputGroup className=\"input-group-alternative\">\n                      <InputGroupAddon addonType=\"prepend\">\n                        <InputGroupText>\n                          <i className=\"ni ni-tag\" />\n                        </InputGroupText>\n                      </InputGroupAddon>\n                      <Input\n                        placeholder=\"Port\"\n                        type=\"text\"\n                        autoComplete=\"new-Port\"\n                        onChange={(e) => setPort(e.target.value)}\n                      />\n                    </InputGroup>\n                  </FormGroup>\n                  <div className=\"text-center\">\n                    <ButtonGroup className=\"col-10\">\n                      <Button\n                        className=\"px-4 text-lg\"\n                        outline\n                        color=\"primary\"\n                        size=\"lg\"\n                        value={\"Local\"}\n                        onClick={(e) => setLocate(e.target.value)}\n                        active={locate === \"Local\"}\n                      >\n                        Local\n                      </Button>\n                      <Button\n                        className=\"px-4 text-lg\"\n                        outline\n                        color=\"primary\"\n                        size=\"lg\"\n                        value={\"Cloud\"}\n                        onClick={(e) => setLocate(e.target.value)}\n                        active={locate === \"Cloud\"}\n                      >\n                        Cloud\n                      </Button>\n                    </ButtonGroup>\n                  </div>\n\n                  <div className=\"text-center\">\n                    <Button\n                      className=\" col-5 mt-5 text-lg \"\n                      color=\"success\"\n                      type=\"submit\"\n                      onClick={handleSubmitDemo}\n                    >\n                      For Demo\n                    </Button>\n                    <Button\n                      className=\" col-5  mt-5 text-lg \"\n                      color=\"primary\"\n                      type=\"button\"\n                      onClick={handleSubmitSignin}\n                    >\n                      Sign in\n                    </Button>\n                  </div>\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n};\n\nexport default Workbench;\n","/root/Web/workbench/client/src/views/examples/Assistant.js",[],[],"/root/Web/workbench/client/src/views/examples/Energy.js",["290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325"],[],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n// reactstrap components\nimport axios from \"axios\";\nimport Chart from \"chart.js\";\nimport { useState } from \"react\";\n// react plugin used to create charts\nimport { Bar, Line } from \"react-chartjs-2\";\n\nimport React, { useRef, useEffect } from \"react\";\n\nimport {\n  Alert,\n  Card,\n  CardTitle,\n  Col,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  Table,\n  Container,\n  Row,\n  CardBody,\n  Button,\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ButtonGroup,\n  ModalFooter,\n  Progress,\n} from \"reactstrap\";\n\nimport { chartOptions, parseOptions } from \"variables/charts.js\";\nimport { energychart, pushdownchart } from \"variables/charts\";\n// core components\nimport Header from \"components/Headers/Header.js\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\n\nconst Energy = () => {\n  const [loginData, setLoginData] = useState([]);\n\n  const [modalSets, setModalSets] = useState(false);\n  const toggle = () => {\n    setModalSets(!modalSets);\n    resetOptions();\n  };\n  const add = () => {\n    toggle();\n    if (StorageSelected === \"CSD\")\n      setCustomSet([\n        ...customSet,\n        {\n          Set: [\n            StorageSelected,\n            DBMSSelected,\n            CSDNumSelected,\n            CSDKindSelected,\n            AlgorithmSelected,\n            IndexSelected,\n            BlockSizeSelected,\n          ],\n        },\n      ]);\n    else\n      setCustomSet([\n        ...customSet,\n        {\n          Set: [\n            StorageSelected,\n            DBMSSelected,\n            \"X\",\n            \"X\",\n            AlgorithmSelected,\n            IndexSelected,\n            BlockSizeSelected,\n          ],\n        },\n      ]);\n    setSet(customSet.length);\n    setSelectedOptions(customSet.length);\n  };\n\n  const [modal, setModal] = useState(false);\n  const modify = () => {\n    toggle2();\n    const updatedOption = [...customSet];\n    // 특정 인덱스의 요소 수정\n    if (StorageSelected === \"CSD\")\n      updatedOption[set].Set = [\n        StorageSelected,\n        DBMSSelected,\n        CSDNumSelected,\n        CSDKindSelected,\n        AlgorithmSelected,\n        IndexSelected,\n        BlockSizeSelected,\n      ];\n    else\n      updatedOption[set].Set = [\n        StorageSelected,\n        DBMSSelected,\n        \"X\",\n        \"X\",\n        AlgorithmSelected,\n        IndexSelected,\n        BlockSizeSelected,\n      ];\n    // 상태 업데이트\n    setCustomSet(updatedOption);\n  };\n  const resetOptions = () => {\n    setStorageSelected(\"SSD\");\n    setDBMSSelected(\"MySQL\");\n    setCSDNumSelected(\"8\");\n    setCSDKindSelected(\"NGD\");\n    setAlgorithmSelected(\"CSD Metric Score\");\n    setIndexSelected(\"Use\");\n    setBlockSizeSelected(\"4096\");\n  };\n  const toggle2 = (e) => {\n    setModal(!modal);\n  };\n  const [StorageSelected, setStorageSelected] = useState(\"SSD\");\n  const [CSDNumSelected, setCSDNumSelected] = useState(\"8\");\n  const [CSDKindSelected, setCSDKindSelected] = useState(\"NGD\");\n  const [DBMSSelected, setDBMSSelected] = useState(\"MySQL\");\n  const [AlgorithmSelected, setAlgorithmSelected] =\n    useState(\"CSD Metric Score\");\n  const [IndexSelected, setIndexSelected] = useState(\"Use\");\n  const [BlockSizeSelected, setBlockSizeSelected] = useState(\"4096\");\n  const [selectedOptions, setSelectedOptions] = useState(0);\n\n  const [set, setSet] = useState(0);\n  const handleStorage = (e) => {\n    setStorageSelected(e.target.value);\n    if (StorageSelected === \"SSD\" && e.target.value === \"CSD\") {\n      setCSDNumSelected(\"8\");\n      setCSDKindSelected(\"NGD\");\n    }\n  };\n  const handleDBMS = (e) => {\n    setDBMSSelected(e.target.value);\n  };\n  const handleCSDCount = (e) => {\n    setCSDNumSelected(e.target.value);\n  };\n  const handleCSDKind = (e) => {\n    setCSDKindSelected(e.target.value);\n  };\n  const handleAlgorithm = (e) => {\n    setAlgorithmSelected(e.target.value);\n  };\n  const handleIndex = (e) => {\n    setIndexSelected(e.target.value);\n  };\n  const handleBlockSize = (e) => {\n    setBlockSizeSelected(e.target.value);\n  };\n\n  const handleOptionInfo = (index, e) => {\n    toggle2();\n    setSet(index);\n    setStorageSelected(customSet[index].Set[0]);\n    setDBMSSelected(customSet[index].Set[1]);\n    setCSDNumSelected(customSet[index].Set[2]);\n    setCSDKindSelected(customSet[index].Set[3]);\n    setAlgorithmSelected(customSet[index].Set[4]);\n    setIndexSelected(customSet[index].Set[5]);\n    setBlockSizeSelected(customSet[index].Set[6]);\n  };\n\n  const handleSelectOption = (index, e) => {\n    setSelectedOptions(index);\n  };\n\n  const [value, setValue] = useState(\"Select Query\");\n  const [source, setSource] = useState(\"/img/TPC-H 1.png\");\n  const [tableName, setTableName] = useState(\"\");\n  const [whereClause, setWhereClause] = useState(\"\");\n  const [columnName, setColumnName] = useState(\"\");\n  const [orderBy, setOrderBy] = useState(\"\");\n  const [groupBy, setGroupBy] = useState(\"\");\n  const [analysis, setAnalysis] = useState(false);\n  const [template, setShowTemplate] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [generate, setGenerate] = useState(false);\n  const [open, setOpen] = useState(\"1\");\n  const [ind, setInd] = useState(0);\n  const [snippet, setSnippet] = useState([]);\n  const [valueErr, setValueErr] = useState(false);\n  const [optionErr, setOptionErr] = useState(false);\n\n  const [NormalizedQuery, setNormalizedQuery] = useState([]);\n  const [CSDEnergyUsageForcast, setCSDEnergyUsageForcast] = useState();\n  const [conservationEffectForcast, setConservationEffectForcast] = useState();\n  const [efficientOption, setEfficientOption] = useState();\n  const [error, setError] = useState();\n  const [energyUsage, setEnergyUsage] = useState();\n  const [conservationEffect, setConservationEffect] = useState();\n  const [isSimul, setIsSimul] = useState(false);\n\n  const [customSet, setCustomSet] = useState([{ Set: [, , , ,] }]);\n  const Query = useRef();\n  const handleQuerySimul = (e) => {\n    if (!selectedOptions) setOptionErr(true);\n    else setOptionErr(false);\n    if (!Query.current.value) setValueErr(true);\n    else setValueErr(false);\n    if (value !== \"Select Query\" && selectedOptions && Query.current.value) {\n      setIsSimul(true);\n      fetch(\"http://10.0.5.123:40400/pushdown\", {\n        //회원가입시 입력한 값들이 서버로 전송될 수 있는 주소\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          queryID: ind,\n          query: Query.current.value\n            .replace(/[\\n\\t]/g, \" \")\n            .replace(/\\s{2,}/g, \" \"),\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          //const values = Object.values(data); // JSON 데이터의 값들을 배열로 추출\n          setGenerate(data.query);\n          setSnippet(data.snippet);\n          setNormalizedQuery([...NormalizedQuery, data.query]);\n        });\n    }\n  };\n  const inputRef = useRef();\n  if (window.Chart) {\n    parseOptions(Chart, chartOptions());\n  }\n  const [activeNav, setActiveNav] = useState(true);\n  const [activeNav2, setActiveNav2] = useState(true);\n  const toggleNavs = (e, index) => {\n    e.preventDefault();\n    setActiveNav(index);\n  };\n  const toggleNavs2 = (e, index) => {\n    e.preventDefault();\n    setActiveNav2(index);\n  };\n  const changeImage = (value) => {\n    setSource(\"/img/\" + value + \".png\");\n  };\n  const analysisQuery = (e) => {\n    setAnalysis(true);\n  };\n  const generateAPI = (e) => {\n    setGenerate(true);\n  };\n  const showTemp = (e) => {\n    setShowTemplate(true);\n  };\n  const handleDropdownClick = (index, e) => {\n    setValue(e.target.getAttribute(\"value\"));\n    setInd(index);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // CSV 파일 가져오기\n        const response = await axios.get(\"http://10.0.5.123:40400/login_data\");\n        setLoginData([\n          response.data.DBMS,\n          response.data.Host,\n          response.data.Port,\n          response.data.Demo,\n        ]);\n      } catch (error) {\n        console.error(\"CSV 파일 가져오기 중 오류 발생:\", error);\n      }\n    };\n\n    fetchData();\n\n    if (value !== \"Select Query\") {\n      if (ind < 10) {\n        fetch(`/query/tpch0${ind}.sql`)\n          .then((response) => response.text())\n          .then((text) => {\n            Query.current.value = text;\n          });\n      } else {\n        fetch(`/query/tpch${ind}.sql`)\n          .then((response) => response.text())\n          .then((text) => {\n            Query.current.value = text;\n          });\n      }\n    }\n  }, [ind, value]);\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleInputValue = () => {\n    const queryParts = [];\n    if (columnName) queryParts.push(`SELECT ${columnName}`);\n    if (tableName) queryParts.push(`FROM ${tableName}`);\n    if (whereClause) queryParts.push(`WHERE ${whereClause}`);\n    if (orderBy) queryParts.push(`ORDER BY ${orderBy}`);\n    if (groupBy) queryParts.push(`GroupBy=${groupBy}`);\n    const query = queryParts.join(\"\\n\");\n    inputRef.current.value = query;\n  };\n\n  //For Demo\n  const [workbench, setWorkbench] = useState(true);\n  const [simulator, setSimulator] = useState(true);\n  const [dbConnector, setDBConnector] = useState(false);\n  const [SE, setSE] = useState(false);\n  const [CSDPushdown, setCSDPushdown] = useState(false);\n  const [result, setResult] = useState(false);\n\n  const [currentIns, setCurrentIns] = useState(\"\");\n  const [clear, setClear] = useState([\"\", \"\", \"\", \"\"]);\n\n  const [host, setHost] = useState(\n    \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear\"\n  );\n\n  const handleDemo = (e) => {\n    const delay = 2000; // 2초 지연\n    switch (e.target.getAttribute(\"value\")) {\n      case \"Workbench\":\n        setSimulator(!simulator);\n        break;\n      case \"Simulator\":\n        setWorkbench(!workbench);\n        setCurrentIns(\"Simulator\");\n        setTimeout(() => {\n          setIsSimul(true);\n          if (selectedOptions.length !== 2) setOptionErr(true);\n          else setOptionErr(false);\n          if (!Query.current.value) setValueErr(true);\n          else setValueErr(false);\n          if (\n            value !== \"Select Query\" &&\n            selectedOptions.length === 2 &&\n            Query.current.value\n          ) {\n            fetch(\"http://10.0.5.123:40400\", {\n              //회원가입시 입력한 값들이 서버로 전송될 수 있는 주소\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                queryID: ind,\n                query: Query.current.value\n                  .replace(/[\\n\\t]/g, \" \")\n                  .replace(/\\s{2,}/g, \" \"),\n                options: [\n                  customSet[selectedOptions[0]],\n                  customSet[selectedOptions[1]],\n                ],\n              }),\n            })\n              .then((response) => response.json())\n              .then((data) => {\n                setGenerate(data.query);\n                setSnippet(data.snippet);\n              });\n          }\n          setDBConnector(!dbConnector);\n          clear[0] = \"clear\";\n          setClear(clear);\n        }, delay);\n        break;\n      case \"DB Connect Instance\":\n        setSimulator(!simulator);\n        setCurrentIns(\"DB Connect Instance\");\n        setHost(\n          \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear;\"\n        );\n        setTimeout(() => {\n          clear[1] = \"clear\";\n          setSE(!SE);\n          setCSDPushdown(!CSDPushdown);\n        }, delay);\n        break;\n      case \"Storage Engine Instance\":\n        setDBConnector(!dbConnector);\n        setCurrentIns(\"Storage Engine Instance & CSD Pushdown Work\");\n        setHost(\n          \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear\"\n        );\n        setTimeout(() => {\n          clear[2] = \"clear\";\n          setResult(!result);\n        }, delay);\n        break;\n      case \"CSD Pushdown Work\":\n        setDBConnector(!dbConnector);\n        setCurrentIns(\"Storage Engine Instance & CSD Pushdown Work\");\n        setHost(\n          \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear\"\n        );\n        setTimeout(() => {\n          clear[2] = \"clear\";\n          setResult(!result);\n        }, delay);\n        break;\n      case \"Result\":\n        const updateClear = clear.map(() => \"\");\n        setClear(updateClear);\n        setCurrentIns(\"Query Input\");\n        setWorkbench(true);\n        setSimulator(true);\n        setDBConnector(true);\n        setSE(true);\n        setCSDPushdown(true);\n        break;\n    }\n  };\n\n  return (\n    <>\n      {loginData[3] === \"O\" && (\n        <Row className=\"header my-4 align-items-center justify-content-center\">\n          <Button\n            className=\"mx-2 btn-demo text-lg clear\"\n            color=\"warning\"\n            size=\"lg\"\n            type=\"button\"\n            value={\"Workbench\"}\n            disabled={!workbench}\n            onClick={handleDemo}\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/demo/workbench.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}Workbench\n          </Button>\n          <i className=\"ni ni-bold-right\"></i>\n          <Button\n            className={`mx-2 bg-yellow text-white btn-demo  text-lg ${clear[0]}`}\n            size=\"lg\"\n            type=\"button\"\n            value={\"Simulator\"}\n            disabled={!simulator}\n            onClick={handleDemo}\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/demo/simul.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}Simulator\n          </Button>\n          <i className=\"ni ni-bold-right\"></i>\n          <Button\n            className={`mx-2 btn-demo  text-lg ${clear[1]}`}\n            color=\"primary\"\n            size=\"lg\"\n            type=\"button\"\n            value={\"DB Connect Instance\"}\n            disabled={!dbConnector}\n            onClick={handleDemo}\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/demo/dbc.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}DB Connect Instance\n          </Button>\n          <i className=\"ni ni-bold-right\"></i>\n          <Col xl=\"2\" className=\"text-center px-0\">\n            <Button\n              className={`mx-2 btn-demo text-lg mb-1 ${clear[2]}`}\n              color=\"danger\"\n              size=\"lg\"\n              type=\"button\"\n              value={\"Storage Engine Instance\"}\n              disabled={!SE}\n              onClick={handleDemo}\n            >\n              <img\n                width={\"40px\"}\n                src={require(\"../../assets/img/icons/demo/se.png\")}\n                alt=\"...\"\n              />\n              {\"   \"}Storage Engine Instance\n            </Button>\n            <Button\n              className={`mx-2 bg-purple text-white btn-demo  text-lg ${clear[2]}`}\n              size=\"lg\"\n              type=\"button\"\n              value={\"CSD Pushdown Work\"}\n              disabled={!CSDPushdown}\n              onClick={handleDemo}\n            >\n              <img\n                width={\"40px\"}\n                src={require(\"../../assets/img/icons/demo/csd.png\")}\n                alt=\"...\"\n              />\n              {\"   \"}CSD Pushdown Work\n            </Button>\n          </Col>\n          <i className=\"ni ni-bold-right\"></i>\n          <Button\n            className=\"mx-2 btn-demo  text-lg\"\n            color=\"info\"\n            size=\"lg\"\n            type=\"button\"\n            value={\"Result\"}\n            disabled={!result}\n            onClick={handleDemo}\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/demo/workbench.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}Workbench\n          </Button>\n          <div>\n            <span className=\"text-lg font-weight-bolder text-darker\">\n              For Demo\n            </span>\n          </div>\n          <Col xl=\"7\">\n            {!workbench && (\n              <Card className=\"bg-light h-100 mt-5\">\n                <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                  <Row className=\"pl-3\">{currentIns}</Row>\n                </CardTitle>\n                <CardBody\n                  className=\"py-0 px-0 bg-darker\"\n                  style={{ minHeight: \"25vh\" }}\n                >\n                  <iframe src={host} width=\"100%\" height=\"500px\" title=\"wssh\" />\n                </CardBody>\n              </Card>\n            )}\n          </Col>\n        </Row>\n      )}\n      <AdminNavbar />\n      <Header />\n      {/* Page content */}\n      <Container className=\"mt--7 px-0\" fluid>\n        <Row className=\"mt-7 justify-content-center\">\n          <Col xl=\"3\" className=\"px-0\">\n            <Card className=\"h-100 bg-lighter\">\n              <CardTitle className=\"h2 py-1  pl-3 mb-0 bg-lighter\">\n                MANAGEMENT\n              </CardTitle>\n              <CardBody className=\"h2 bg-lighter mb-0\">\n                <span>Information</span>\n                <hr className=\"my-2\" />\n                <span>Options</span>\n                <hr className=\"my-2\" />\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xl=\"7\" className=\"px-0\">\n            <Card className=\"bg-light h-100\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                <Row className=\"ml-1 align-items-center\">\n                  Query Input\n                  <div className=\"ml-3 mr-9\">\n                    <Button\n                      color=\"info\"\n                      size=\"lg\"\n                      type=\"button\"\n                      onClick={(e) => {\n                        Query.current.value = \"\";\n                        setValue(\"Select Query\");\n                      }}\n                    >\n                      NEW Query\n                    </Button>\n                    <Button\n                      color=\"warning\"\n                      size=\"lg\"\n                      type=\"button\"\n                      className=\"ml-2\"\n                    >\n                      Template\n                    </Button>\n                  </div>\n                  <div className=\"ml-6\">\n                    <Button\n                      color=\"primary\"\n                      size=\"lg\"\n                      type=\"button\"\n                      onClick={handleQuerySimul}\n                    >\n                      Simulate\n                    </Button>\n                    <Button\n                      color=\"dark\"\n                      size=\"lg\"\n                      type=\"button\"\n                      className=\"ml-3 align-items-center\"\n                      onClick={toggle}\n                    >\n                      New Option\n                      <i className=\"ni ni-settings-gear-65 ml-2\" />\n                    </Button>\n                    <Modal\n                      centered\n                      isOpen={modalSets}\n                      toggle={toggle}\n                      size=\"lg\"\n                    >\n                      <ModalHeader toggle={toggle}>\n                        Set Simulator Option\n                      </ModalHeader>\n                      <ModalBody>\n                        <Form>\n                          <Row>\n                            <Col md=\"6\">\n                              <Row className=\"align-tiems-center ml-2\">\n                                <Label className=\"h3\">Storage : </Label>\n                                <ButtonGroup className=\"ml-3\">\n                                  <Button\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"SSD\"}\n                                    onClick={handleStorage}\n                                    active={StorageSelected === \"SSD\"}\n                                  >\n                                    SSD\n                                  </Button>\n                                  <Button\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"CSD\"}\n                                    onClick={handleStorage}\n                                    active={StorageSelected === \"CSD\"}\n                                  >\n                                    CSD\n                                  </Button>\n                                </ButtonGroup>\n                              </Row>\n                            </Col>\n                            <Col md=\"6\">\n                              <FormGroup row>\n                                <Label for=\"DBMS\" sm=\"3\" className=\"h3\">\n                                  DBMS :\n                                </Label>\n                                <Col sm=\"9\">\n                                  <Input\n                                    id=\"DBMS\"\n                                    placeholder=\"DBMS\"\n                                    type=\"text\"\n                                    onChange={handleDBMS}\n                                    defaultValue={\"MySQL\"}\n                                  />\n                                </Col>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                          {StorageSelected === \"CSD\" && (\n                            <Row>\n                              <Col md=\"6\">\n                                <FormGroup row>\n                                  <Label for=\"CSD Count\" sm=\"4\" className=\"h3\">\n                                    CSD Count :\n                                  </Label>\n                                  <Col sm=\"8\">\n                                    <Input\n                                      id=\"CSD Count\"\n                                      type=\"number\"\n                                      onChange={handleCSDCount}\n                                      defaultValue={\"8\"}\n                                    />\n                                  </Col>\n                                </FormGroup>\n                              </Col>\n                              <Col md=\"6\">\n                                <Row className=\"align-tiems-center ml-2\">\n                                  <Label className=\"h3\">CSD Kind : </Label>\n                                  <ButtonGroup className=\"ml-3\">\n                                    <Button\n                                      color=\"light\"\n                                      outline\n                                      size=\"sm\"\n                                      value={\"NGD\"}\n                                      onClick={handleCSDKind}\n                                      active={CSDKindSelected === \"NGD\"}\n                                    >\n                                      NGD\n                                    </Button>\n                                    <Button\n                                      color=\"light\"\n                                      outline\n                                      size=\"sm\"\n                                      value={\"Scaleflux\"}\n                                      onClick={handleCSDKind}\n                                      active={CSDKindSelected === \"Scaleflux\"}\n                                    >\n                                      Scaleflux\n                                    </Button>\n                                  </ButtonGroup>\n                                </Row>\n                              </Col>\n                            </Row>\n                          )}\n                          <Row>\n                            <Col md=\"12\">\n                              <Row className=\"align-tiems-center ml-2\">\n                                <Label className=\"h3\">\n                                  Scheduling Algorithm :{\" \"}\n                                </Label>\n                                <ButtonGroup className=\"ml-5 px-4\">\n                                  <Button\n                                    className=\"px-4\"\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"CSD Metric Score\"}\n                                    onClick={handleAlgorithm}\n                                    active={\n                                      AlgorithmSelected === \"CSD Metric Score\"\n                                    }\n                                  >\n                                    CSD Metric Score\n                                  </Button>\n                                  <Button\n                                    className=\"px-4\"\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"Block Count\"}\n                                    onClick={handleAlgorithm}\n                                    active={AlgorithmSelected === \"Block Count\"}\n                                  >\n                                    Block Count\n                                  </Button>\n                                  <Button\n                                    className=\"px-4\"\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"Minimum Overlap SST\"}\n                                    onClick={handleAlgorithm}\n                                    active={\n                                      AlgorithmSelected ===\n                                      \"Minimum Overlap SST\"\n                                    }\n                                  >\n                                    Minimum Overlap SST\n                                  </Button>\n                                </ButtonGroup>\n                              </Row>\n                            </Col>\n                          </Row>\n                          <Row className=\"mt-4\">\n                            <Col md=\"6\">\n                              <Row className=\"align-tiems-center ml-2\">\n                                <Label className=\"h3\">Using Index : </Label>\n                                <ButtonGroup className=\"ml-3\">\n                                  <Button\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"Use\"}\n                                    onClick={handleIndex}\n                                    active={IndexSelected === \"Use\"}\n                                  >\n                                    ACTIVE\n                                  </Button>\n                                  <Button\n                                    color=\"light\"\n                                    outline\n                                    size=\"sm\"\n                                    value={\"Disuse\"}\n                                    onClick={handleIndex}\n                                    active={IndexSelected === \"Disuse\"}\n                                  >\n                                    INACTIVE\n                                  </Button>\n                                </ButtonGroup>\n                              </Row>\n                            </Col>\n                            <Col md=\"6\">\n                              <FormGroup row>\n                                <Label for=\"BlockSize\" sm=\"4\" className=\"h3\">\n                                  Block Size :{\" \"}\n                                </Label>\n                                <Col sm=\"8\">\n                                  <Input\n                                    id=\"BlockSize\"\n                                    placeholder=\"Block Size\"\n                                    type=\"text\"\n                                    onChange={handleBlockSize}\n                                    defaultValue={\"4096\"}\n                                  />\n                                </Col>\n                              </FormGroup>\n                            </Col>\n                          </Row>\n                        </Form>\n                      </ModalBody>\n                      <ModalFooter>\n                        <Button block color=\"primary\" onClick={add}>\n                          ADD\n                        </Button>\n                      </ModalFooter>\n                    </Modal>\n                    <UncontrolledDropdown nav>\n                      <DropdownToggle className=\" ml-3\" split size=\"sm\">\n                        {value + \" \"}\n                      </DropdownToggle>\n                      <DropdownMenu className=\"dropdown-menu-arrow\">\n                        {Array.from({ length: 22 }, (_, i) => i + 1).map(\n                          (index) => (\n                            <DropdownItem\n                              value={`TPC-H ${index}`}\n                              onClick={(e) => handleDropdownClick(index, e)}\n                            >\n                              <i\n                                value={`TPC-H ${index}`}\n                                onClick={(e) => handleDropdownClick(index, e)}\n                                className=\"ni ni-bold-right\"\n                              />\n                              <span\n                                value={`TPC-H ${index}`}\n                                onClick={(e) => handleDropdownClick(index, e)}\n                              >{`TPC-H ${index}`}</span>\n                            </DropdownItem>\n                          )\n                        )}\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                  </div>\n                </Row>\n              </CardTitle>\n              <CardBody className=\"py-0 px-0\">\n                {optionErr && (\n                  <Alert color=\"danger\">\n                    <strong>Danger!</strong> Select Option First\n                  </Alert>\n                )}\n                {valueErr && (\n                  <Alert color=\"danger\">\n                    <strong>Danger!</strong> Input Value First!\n                  </Alert>\n                )}\n                <Form className=\"justify-content-end ml-8 h-100\">\n                  <Input\n                    className=\"h-100 text-darker\"\n                    id=\"Query\"\n                    rows=\"19\"\n                    type=\"textarea\"\n                    innerRef={Query}\n                  />\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xl=\"2\" className=\"px-0\">\n            <Card className=\"bg-light h-100\">\n              <CardTitle className=\"h1 py-1  pl-3 mb-0 bg-gradient-light text-darker\">\n                Custom Sets List\n              </CardTitle>\n              <CardBody className=\"py-0 px-0 bg-white \">\n                <Table\n                  className=\"align-items-center text-center bg-white\"\n                  responsive\n                  bordered\n                >\n                  <tbody>\n                    {Array.from(\n                      { length: customSet.length - 1 },\n                      (_, i) => i + 1\n                    ).map((index) => (\n                      <tr>\n                        <th scope=\"row\" className=\"w-75\">\n                          <Button\n                            className=\"mt-1 \"\n                            color=\"light\"\n                            size=\"lg\"\n                            block\n                            type=\"button\"\n                            onClick={(e) => handleOptionInfo(index, e)}\n                          >\n                            CSD Option {index}\n                          </Button>\n                        </th>\n                        <td className=\"w-25\">\n                          <Button\n                            className=\"btn-icon btn-2\"\n                            color=\"success\"\n                            type=\"button\"\n                            outline={index !== selectedOptions}\n                            onClick={(e) => handleSelectOption(index, e)}\n                          >\n                            <i className=\"ni ni-check-bold text-xl\" />\n                          </Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n                <Modal centered isOpen={modal} toggle={toggle2} size=\"lg\">\n                  <ModalHeader toggle={toggle2}>\n                    Set Simulator Option\n                  </ModalHeader>\n                  <ModalBody>\n                    <Form>\n                      <Row>\n                        <Col md=\"6\">\n                          <Row className=\"align-tiems-center ml-2\">\n                            <Label className=\"h3\">Storage : </Label>\n                            <ButtonGroup className=\"ml-3\">\n                              <Button\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"SSD\"}\n                                onClick={handleStorage}\n                                active={StorageSelected === \"SSD\"}\n                              >\n                                SSD\n                              </Button>\n                              <Button\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"CSD\"}\n                                onClick={handleStorage}\n                                active={StorageSelected === \"CSD\"}\n                              >\n                                CSD\n                              </Button>\n                            </ButtonGroup>\n                          </Row>\n                        </Col>\n                        <Col md=\"6\">\n                          <FormGroup row>\n                            <Label for=\"DBMS\" sm=\"3\" className=\"h3\">\n                              DBMS :\n                            </Label>\n                            <Col sm=\"9\">\n                              <Input\n                                id=\"DBMS\"\n                                placeholder=\"DBMS\"\n                                type=\"text\"\n                                onChange={handleDBMS}\n                                defaultValue={DBMSSelected}\n                              />\n                            </Col>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                      {StorageSelected === \"CSD\" && (\n                        <Row>\n                          <Col md=\"6\">\n                            <FormGroup row>\n                              <Label for=\"CSD Count\" sm=\"4\" className=\"h3\">\n                                CSD Count :\n                              </Label>\n                              <Col sm=\"8\">\n                                <Input\n                                  id=\"CSD Count\"\n                                  type=\"number\"\n                                  onChange={handleCSDCount}\n                                  defaultValue={\n                                    StorageSelected === \"CSD\" &&\n                                    CSDNumSelected === \"X\"\n                                      ? \"8\"\n                                      : CSDNumSelected\n                                  }\n                                />\n                              </Col>\n                            </FormGroup>\n                          </Col>\n                          <Col md=\"6\">\n                            <Row className=\"align-tiems-center ml-2\">\n                              <Label className=\"h3\">CSD Kind : </Label>\n                              <ButtonGroup className=\"ml-3\">\n                                <Button\n                                  color=\"light\"\n                                  outline\n                                  size=\"sm\"\n                                  value={\"NGD\"}\n                                  onClick={handleCSDKind}\n                                  active={CSDKindSelected === \"NGD\" || \"X\"}\n                                >\n                                  NGD\n                                </Button>\n                                <Button\n                                  color=\"light\"\n                                  outline\n                                  size=\"sm\"\n                                  value={\"Scaleflux\"}\n                                  onClick={handleCSDKind}\n                                  active={CSDKindSelected === \"Scaleflux\"}\n                                >\n                                  Scaleflux\n                                </Button>\n                              </ButtonGroup>\n                            </Row>\n                          </Col>\n                        </Row>\n                      )}\n                      <Row>\n                        <Col md=\"12\">\n                          <Row className=\"align-tiems-center ml-2\">\n                            <Label className=\"h3\">\n                              Scheduling Algorithm :{\" \"}\n                            </Label>\n                            <ButtonGroup className=\"ml-5 px-4\">\n                              <Button\n                                className=\"px-4\"\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"CSD Metric Score\"}\n                                onClick={handleAlgorithm}\n                                active={\n                                  AlgorithmSelected === \"CSD Metric Score\"\n                                }\n                              >\n                                CSD Metric Score\n                              </Button>\n                              <Button\n                                className=\"px-4\"\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"Block Count\"}\n                                onClick={handleAlgorithm}\n                                active={AlgorithmSelected === \"Block Count\"}\n                              >\n                                Block Count\n                              </Button>\n                              <Button\n                                className=\"px-4\"\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"Minimum Overlap SST\"}\n                                onClick={handleAlgorithm}\n                                active={\n                                  AlgorithmSelected === \"Minimum Overlap SST\"\n                                }\n                              >\n                                Minimum Overlap SST\n                              </Button>\n                            </ButtonGroup>\n                          </Row>\n                        </Col>\n                      </Row>\n                      <Row className=\"mt-4\">\n                        <Col md=\"6\">\n                          <Row className=\"align-tiems-center ml-2\">\n                            <Label className=\"h3\">Using Index : </Label>\n                            <ButtonGroup className=\"ml-3\">\n                              <Button\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"Use\"}\n                                onClick={handleIndex}\n                                active={IndexSelected === \"Use\"}\n                              >\n                                ACTIVE\n                              </Button>\n                              <Button\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                value={\"Disuse\"}\n                                onClick={handleIndex}\n                                active={IndexSelected === \"Disuse\"}\n                              >\n                                INACTIVE\n                              </Button>\n                            </ButtonGroup>\n                          </Row>\n                        </Col>\n                        <Col md=\"6\">\n                          <FormGroup row>\n                            <Label for=\"BlockSize\" sm=\"4\" className=\"h3\">\n                              Block Size :{\" \"}\n                            </Label>\n                            <Col sm=\"8\">\n                              <Input\n                                id=\"BlockSize\"\n                                placeholder=\"Block Size\"\n                                type=\"text\"\n                                onChange={handleBlockSize}\n                                defaultValue={BlockSizeSelected}\n                              />\n                            </Col>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                    </Form>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button block color=\"primary\" onClick={modify}>\n                      MODIFY\n                    </Button>\n                  </ModalFooter>\n                </Modal>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center h-50vh overflow-visible\">\n          <Col xl=\"3\" className=\"px-0\">\n            <Card className=\"bg-white  h-100\">\n              <CardTitle className=\"h2 py-1 pl-3 mb-0 bg-light text-darker\">\n                <Row className=\"pl-3 justify-content-center\">\n                  CSD Option {\" \" + selectedOptions}\n                </Row>\n              </CardTitle>\n              <CardBody className=\"py-0 px-0\">\n                <Table\n                  className=\"align-items-center text-center bg-white\"\n                  responsive\n                  bordered\n                >\n                  <tbody>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>Storage</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[0]}</h4>\n                      </td>\n                    </tr>\n\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>Network</h3>\n                      </th>\n                      <td>\n                        <h4>1024 KB/s</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>DBMS</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[1]}</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>CSD Count</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[2]}</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>CSD Kind</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[3]}</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>Algorithm</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[4]}</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>Index</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[5]}</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>Block Size</h3>\n                      </th>\n                      <td>\n                        <h4>{customSet[selectedOptions].Set[6]}</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>CPU</h3>\n                      </th>\n                      <td>\n                        <h4>8 Core</h4>\n                      </td>\n                    </tr>\n                    <tr>\n                      <th scope=\"row\">\n                        <h3>Memory</h3>\n                      </th>\n                      <td>\n                        <h4>200 G</h4>\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xl=\"9\" className=\"px-0\">\n            <Card className=\"bg-white h-25vh\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                <Row className=\"pl-3 align-items-center\">\n                  Pushdown Effect Check\n                </Row>\n              </CardTitle>\n              <CardBody className=\"py-0 px-0\">\n                {isSimul && (\n                  <Row className=\"h-100\">\n                    <Col xl=\"6\">\n                      <div className=\"chart h-100\">\n                        {/* Chart wrapper */}\n                        <Bar\n                          data={pushdownchart.powerData}\n                          options={pushdownchart.options}\n                        />\n                      </div>\n                    </Col>\n                    <Col xl=\"6\">\n                      <div className=\"chart h-100\">\n                        {/* Chart wrapper */}\n                        <Line\n                          data={energychart.data}\n                          options={energychart.options}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                )}\n              </CardBody>\n            </Card>\n            <Card className=\"bg-white h-25vh\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                Query Result\n              </CardTitle>\n              <CardBody className=\"py-0 px-0 overflow-auto\">\n                <Table\n                  className=\"align-items-center text-center bg-white\"\n                  responsive\n                >\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\" className=\"text-sm w-50\">\n                        Normaized Query\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Requests\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        AVG Latency\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Total Time\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Percent Time\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Rows/Query\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.from(\n                      { length: NormalizedQuery.length },\n                      (_, i) => i\n                    ).map((index) => (\n                      <tr>\n                        <td>\n                          <Row>\n                            <Col xl=\"1\">\n                              <Input type=\"checkbox\" />\n                            </Col>\n                            <Col xl=\"10\">\n                              {NormalizedQuery[index].length < 105\n                                ? NormalizedQuery[index]\n                                : NormalizedQuery[index].slice(0, 95) + \"...\"}\n                            </Col>\n                          </Row>\n                        </td>\n                        <td>\n                          <Progress\n                            max=\"100\"\n                            value={index * 10}\n                            color=\"primary\"\n                            style={{ height: \"20px\", width: \"60px\" }}\n                          />\n                        </td>\n                        <td>\n                          <Progress\n                            max=\"100\"\n                            value={100 - index * 10}\n                            color=\"primary\"\n                            style={{ height: \"20px\", width: \"60px\" }}\n                          />\n                        </td>\n                        <td>\n                          <Progress\n                            max=\"100\"\n                            value={100 - index * 10}\n                            color=\"primary\"\n                            style={{ height: \"20px\", width: \"60px\" }}\n                          />\n                        </td>\n                        <td>\n                          <Progress\n                            max=\"100\"\n                            value={100 - index * 10}\n                            color=\"primary\"\n                            style={{ height: \"20px\", width: \"60px\" }}\n                          />\n                        </td>\n                        <td>\n                          <Progress\n                            max=\"100\"\n                            value={100 - index * 10}\n                            color=\"primary\"\n                            style={{ height: \"20px\", width: \"60px\" }}\n                          />\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          {/*<Col xl=\"2\" className=\"px-0\">\n            <Card className=\"bg-white h-100\">\n              <CardTitle className=\"h1 py-1 mb-0 bg-gradient-light text-darker text-center\">\n                Effect Result\n              </CardTitle>\n              <CardBody className=\"py-0 px-0\">\n                {isSimul && (\n                  <Table striped responsive>\n                    <tbody className=\"text-center\">\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>Set 1 Energy Usage Forcast</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>{SSDEnergyUsageForcast + \" W\"}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>Set 2 Energy Usage Forcast</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>{CSDEnergyUsageForcast + \" W\"}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>Energy Conservation Effect Forcast</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>{conservationEffectForcast + \" %\"}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>Efficient Option</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4 className=\"text-danger\">{efficientOption}</h4>\n                        </td>\n                      </tr>\n                      <tr className=\"w-100\">\n                        <td className=\"font-weight-bold\">\n                          <h3>Prediction Error</h3>\n                        </td>\n                      </tr>\n                      <tr className=\"w-100\">\n                        <td>\n                          <h4>{error + \" %\"}</h4>\n                        </td>\n                      </tr>\n                      <tr className=\"w-100\">\n                        <td className=\"font-weight-bold\">\n                          <h3>Energy Conservation Effect</h3>\n                        </td>\n                      </tr>\n                      <tr className=\"w-100\">\n                        <td>\n                          <h4 className=\"text-danger\">\n                            {conservationEffect + \" %\"}\n                          </h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                )}\n              </CardBody>\n            </Card>\n                </Col>*/}\n        </Row>\n\n        {/* Query snippet\n        <Card className=\"bg-white h-50\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                Query Snippet\n              </CardTitle>\n              <CardBody className=\"py-0 px-0\">\n                <Table\n                  className=\"align-items-center text-center bg-white\"\n                  responsive\n                >\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Num\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Snippet Type\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Projection Colume\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Filter Clause\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Order by\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Group by\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.from({ length: snippet.length }, (_, i) => i).map(\n                      (index) => (\n                        <tr>\n                          <th scope=\"row\">\n                            {snippet[index][\"Snippet Type\"] && index + 1}\n                          </th>\n                          <td>\n                            <h4>{snippet[index][\"Snippet Type\"]}</h4>\n                          </td>\n                          <td>\n                            <h4>{snippet[index][\"Projection Column\"]}</h4>\n                          </td>\n                          <td>\n                            <h4>{snippet[index][\"Filter Clause\"]}</h4>\n                          </td>\n                          <td>\n                            <h4>{snippet[index][\"Order by\"]}</h4>\n                          </td>\n                          <td>\n                            <h4>{snippet[index][\"Group by\"]}</h4>\n                          </td>\n                        </tr>\n                      )\n                    )}\n                  </tbody>\n                </Table>\n              </CardBody>\n            </Card> */}\n\n        {/* <Row className=\"mt-5\">\n          <Col xl=\"12\">\n            {template && (\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-1 pb-2\">\n                  <h2 className=\"text-primary\">Template API</h2>\n                </CardHeader>\n                <CardBody>\n                  <Row>\n                    <Col xl=\"6\">\n                      <Form>\n                        <Row className=\"mt-3\">\n                          <Col md=\"10\">\n                            <Input\n                              id=\"Table Name\"\n                              placeholder=\"Table Name\"\n                              type=\"text\"\n                              onChange={(e) => setTableName(e.target.value)}\n                              onKeyPress={handleInputValue}\n                            />\n                          </Col>\n                          <Button\n                            className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                            type=\"button\"\n                            onClick={handleInputValue}\n                          >\n                            <i className=\"ni ni-fat-add\" />\n                          </Button>\n                        </Row>\n                        <Row className=\"mt-3\">\n                          <Col md=\"10\">\n                            <Input\n                              id=\"Where\"\n                              placeholder=\"Where\"\n                              type=\"text\"\n                              onChange={(e) => setWhereClause(e.target.value)}\n                              onKeyPress={handleInputValue}\n                            />\n                          </Col>\n                          <Button\n                            className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                            type=\"button\"\n                            onClick={handleInputValue}\n                          >\n                            <i className=\"ni ni-fat-add\" />\n                          </Button>\n                        </Row>\n                        <Row className=\"mt-3\">\n                          <Col md=\"10\">\n                            <Input\n                              id=\"Column\"\n                              placeholder=\"Column\"\n                              type=\"text\"\n                              onKeyPress={handleInputValue}\n                              onChange={(e) => setColumnName(e.target.value)}\n                            />\n                          </Col>\n                          <Button\n                            className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                            type=\"button\"\n                            onClick={handleInputValue}\n                          >\n                            <i className=\"ni ni-fat-add\" />\n                          </Button>\n                        </Row>\n                        <Row className=\"mt-3\">\n                          <Col xl=\"6\">\n                            <Row>\n                              <Col md=\"10\">\n                                <Input\n                                  id=\"OrderBy\"\n                                  placeholder=\"OrderBy\"\n                                  type=\"text\"\n                                  onKeyPress={handleInputValue}\n                                  onChange={(e) => setOrderBy(e.target.value)}\n                                />\n                              </Col>\n                              <Button\n                                className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                                type=\"button\"\n                                onClick={handleInputValue}\n                              >\n                                <i className=\"ni ni-fat-add\" />\n                              </Button>\n                            </Row>\n                          </Col>\n                          <Col xl=\"6\">\n                            <Row>\n                              <Col md=\"10\">\n                                <Input\n                                  id=\"GroupBy\"\n                                  placeholder=\"GroupBy\"\n                                  type=\"text\"\n                                  onKeyPress={handleInputValue}\n                                  onChange={(e) => setGroupBy(e.target.value)}\n                                />\n                              </Col>\n                              <Button\n                                className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                                type=\"button\"\n                                onClick={handleInputValue}\n                              >\n                                <i className=\"ni ni-fat-add\" />\n                              </Button>\n                            </Row>\n                          </Col>\n                        </Row>\n                      </Form>\n                    </Col>\n                    <Col xl=\"6\">\n                      <Form>\n                        <h3 className=\"mb-2\">Generated Query</h3>\n                        <Input\n                          id=\"exampleFormControlTextarea1\"\n                          innerRef={inputRef}\n                          placeholder=\"Write a large text here ...\"\n                          rows=\"9\"\n                          type=\"textarea\"\n                          disabled\n                        />\n                        <div className=\"mt-4\">\n                          <Button\n                            block\n                            color=\"primary\"\n                            size=\"lg\"\n                            type=\"button\"\n                            onClick={generateAPI}\n                          >\n                            Generate API\n                          </Button>\n                        </div>\n                      </Form>\n                    </Col>\n                  </Row>\n                </CardBody>\n              </Card>\n            )}\n          </Col>\n        </Row> */}\n        {/* {generate && (\n          <Row>\n            <Col xl=\"12\" className=\"text-right\">\n              <img\n                src={require(\"../../assets/img/brand/generate.png\")}\n                width={\"50%\"}\n                height={\"80%\"}\n                alt=\"...\"\n              />\n            </Col>\n          </Row>\n        )} */}\n      </Container>\n    </>\n  );\n};\n\nexport default Energy;\n","/root/Web/workbench/client/src/views/examples/Pushdown.js",["326","327","328","329","330","331","332","333","334"],[],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n// reactstrap components\nimport axios from \"axios\";\nimport Chart from \"chart.js\";\nimport { useState } from \"react\";\n// react plugin used to create charts\nimport { HorizontalBar, Pie } from \"react-chartjs-2\";\nimport classnames from \"classnames\";\n\nimport React, { useRef, useEffect } from \"react\";\n\nimport {\n  Alert,\n  Badge,\n  ButtonGroup,\n  Card,\n  CardHeader,\n  CardTitle,\n  Col,\n  DropdownMenu,\n  DropdownItem,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  Table,\n  Container,\n  Row,\n  CardBody,\n  Button,\n  Input,\n  Form,\n  FormGroup,\n  Collapse,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Label,\n} from \"reactstrap\";\n\nimport { chartOptions, parseOptions } from \"variables/charts.js\";\nimport { chartExample5, pushdownchart } from \"variables/charts\";\n// core components\nimport Header from \"components/Headers/Header.js\";\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\n\nconst Pushdown = () => {\n  if (window.Chart) {\n    parseOptions(Chart, chartOptions());\n  }\n\n  const [modal, setModal] = useState(false);\n  const [isEffectCheck, setIsEffectCheck] = useState(false);\n  const [isGenerateApi, setIsGenerateApi] = useState(false);\n  const [isPushdown, setIsPushdown] = useState(false);\n\n  const [AlgorithmSelected, setAlgorithmSelected] =\n    useState(\"CSD Metric Score\");\n  const [IndexSelected, setIndexSelected] = useState(\"Use\");\n  const [DBMSSelected, setDBMSSelected] = useState(\"MySQL\");\n  const [BlockSizeSelected, setBlockSizeSelected] = useState(\"4096\");\n  const [option, setOption] = useState([]);\n\n  const [snippet, setSnippet] = useState([]);\n  const [SSDUsageForcast, setSSDUsageForcast] = useState();\n  const [CSDUsageForcast, setCSDUsageForcast] = useState();\n  const [HostConservationEffectForcast, setConservationEffectForcast] =\n    useState();\n  const [error, setError] = useState();\n  const [energyUsage, setEnergyUsage] = useState();\n  const [HostConservationEffect, setConservationEffect] = useState();\n  const [ind, setInd] = useState(0);\n\n  const [tableName, setTableName] = useState(\"\");\n  const [whereClause, setWhereClause] = useState(\"\");\n  const [columnName, setColumnName] = useState(\"\");\n  const [orderBy, setOrderBy] = useState(\"\");\n  const [groupBy, setGroupBy] = useState(\"\");\n\n  const [optionErr, setOptionErr] = useState(false);\n  const [valueErr, setValueErr] = useState(false);\n\n  const [template, setShowTemplate] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [generate, setGenerate] = useState(\"\");\n\n  const [activeNav, setActiveNav] = useState(true);\n  const [activeNav2, setActiveNav2] = useState(true);\n\n  const [value, setValue] = useState(\"Select Query\");\n  const [metric, setMetic] = useState(\"Power (W)\");\n\n  const [chartData, setChartdata] = useState(pushdownchart.powerData);\n  const Query = useRef();\n  const inputRef = useRef();\n  const toggleCollapse = () => setIsOpen(!isOpen);\n\n  const [loginData, setLoginData] = useState([]);\n  //pushdown effect check\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // CSV 파일 가져오기\n        const response = await axios.get(\"http://10.0.5.123:40400/login_data\");\n        setLoginData([\n          response.data.DBMS,\n          response.data.Host,\n          response.data.Port,\n          response.data.Demo,\n        ]);\n      } catch (error) {\n        console.error(\"CSV 파일 가져오기 중 오류 발생:\", error);\n      }\n    };\n\n    fetchData();\n\n    if (value !== \"Select Query\") {\n      if (ind < 10) {\n        fetch(`/query/tpch0${ind}.sql`)\n          .then((response) => response.text())\n          .then((text) => {\n            Query.current.value = text;\n          });\n      } else {\n        fetch(`/query/tpch${ind}.sql`)\n          .then((response) => response.text())\n          .then((text) => {\n            Query.current.value = text;\n          });\n      }\n    }\n  }, [ind, value]);\n\n  const handelNewQuery = (e) => {\n    Query.current.value = \"\";\n  };\n\n  const handleEffectCheckClick = (e) => {\n    if (option.length === 0) setOptionErr(true);\n    if (!Query.current.value) setValueErr(true);\n    else setValueErr(false);\n    if (Query.current.value && option.length !== 0) {\n      setIsEffectCheck(true);\n      setGenerate(Query.current.value);\n      fetch(\"http://10.0.5.123:40400/pushdown\", {\n        //회원가입시 입력한 값들이 서버로 전송될 수 있는 주소\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          query: Query.current.value\n            .replace(/[\\n\\t]/g, \" \")\n            .replace(/\\s{2,}/g, \" \"),\n          options: { Set: option },\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          setSnippet(data.snippet);\n          setSSDUsageForcast(data.SSDUsageForcast);\n          setCSDUsageForcast(data.CSDUsageForcast);\n          setConservationEffectForcast(data.ResourceConservationForcast);\n          setError(data.pushdownError);\n          setEnergyUsage(data.pushdownUsage);\n          setConservationEffect(data.PushdownConservationEffect);\n        });\n    }\n  };\n\n  //setting option\n  const toggle = () => {\n    setModal(!modal);\n    resetOptions();\n  };\n  const resetOptions = () => {\n    setDBMSSelected(\"MySQL\");\n    setAlgorithmSelected(\"CSD Metric Score\");\n    setIndexSelected(\"Use\");\n    setBlockSizeSelected(\"4096\");\n  };\n  const add = () => {\n    toggle();\n    setOptionErr(false);\n    setOption([\n      DBMSSelected,\n      AlgorithmSelected,\n      IndexSelected,\n      BlockSizeSelected,\n    ]);\n  };\n  const handleDBMS = (e) => {\n    setDBMSSelected(e.target.value);\n  };\n  const handleBlockSize = (e) => {\n    setBlockSizeSelected(e.target.value);\n  };\n\n  //generate api\n  const generateAPI = (e) => {\n    setIsGenerateApi(true);\n  };\n\n  //pushdown\n  const handlePushdownClick = (e) => {\n    setIsPushdown(true);\n  };\n\n  //toggle\n  const toggleNavs = (e, index) => {\n    e.preventDefault();\n    setActiveNav(index);\n  };\n  const toggleNavs2 = (e, index) => {\n    e.preventDefault();\n    setActiveNav2(index);\n  };\n\n  //template\n  const showTemp = (e) => {\n    setShowTemplate(true);\n  };\n  const handleInputValue = () => {\n    const queryParts = [];\n    if (columnName) queryParts.push(`SELECT ${columnName}`);\n    if (tableName) queryParts.push(`FROM ${tableName}`);\n    if (whereClause) queryParts.push(`WHERE ${whereClause}`);\n    if (orderBy) queryParts.push(`ORDER BY ${orderBy}`);\n    if (groupBy) queryParts.push(`GroupBy=${groupBy}`);\n    const query = queryParts.join(\"\\n\");\n    inputRef.current.value = query;\n  };\n\n  //dropdown\n  const handleQueryDropdown = (index, e) => {\n    setValue(e.target.getAttribute(\"value\"));\n    setInd(index);\n  };\n  const handleMetricDropdown = (e) => {\n    setMetic(e.target.getAttribute(\"value\"));\n    if (e.target.getAttribute(\"value\") === \"Power\")\n      setChartdata(pushdownchart.powerData);\n    else if (e.target.getAttribute(\"value\") === \"Network\")\n      setChartdata(pushdownchart.networkData);\n    else setChartdata(pushdownchart.cpuData);\n  };\n\n  //For Demo\n  const [workbench, setWorkbench] = useState(true);\n  const [simulator, setSimulator] = useState(true);\n  const [dbConnector, setDBConnector] = useState(false);\n  const [SE, setSE] = useState(false);\n  const [fileSys, setFileSys] = useState(false);\n  const [CSDPushdown, setCSDPushdown] = useState(false);\n  const [result, setResult] = useState(false);\n\n  const [currentIns, setCurrentIns] = useState(\"\");\n  const [clear, setClear] = useState([\"\", \"\", \"\", \"\"]);\n\n  const [host, setHost] = useState(\n    \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear\"\n  );\n\n  const handleDemo = (e) => {\n    const delay = 2000; // 2초 지연\n    switch (e.target.getAttribute(\"value\")) {\n      case \"Workbench\":\n        setSimulator(!simulator);\n        break;\n      case \"Simulator\":\n        setWorkbench(!workbench);\n        setCurrentIns(\"Simulator\");\n        if (option.length === 0) setOptionErr(true);\n        if (!Query.current.value) setValueErr(true);\n        else setValueErr(false);\n        setTimeout(() => {\n          if (Query.current.value && option.length !== 0) {\n            setIsEffectCheck(true);\n            setGenerate(Query.current.value);\n            fetch(\"http://10.0.5.123:40400/pushdown\", {\n              //회원가입시 입력한 값들이 서버로 전송될 수 있는 주소\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify({\n                query: Query.current.value\n                  .replace(/[\\n\\t]/g, \" \")\n                  .replace(/\\s{2,}/g, \" \"),\n                options: { Set: option },\n              }),\n            })\n              .then((response) => response.json())\n              .then((data) => {\n                setSnippet(data.snippet);\n                setSSDUsageForcast(data.SSDUsageForcast);\n                setCSDUsageForcast(data.CSDUsageForcast);\n                setConservationEffectForcast(data.ResourceConservationForcast);\n                setError(data.pushdownError);\n                setEnergyUsage(data.pushdownUsage);\n                setConservationEffect(data.PushdownConservationEffect);\n              });\n          }\n          setDBConnector(!dbConnector);\n          clear[0] = \"clear\";\n          setClear(clear);\n        }, delay);\n        break;\n      case \"DB Connect Instance\":\n        setSimulator(!simulator);\n        setCurrentIns(\"DB Connect Instance\");\n        setHost(\n          \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear;\"\n        );\n        setTimeout(() => {\n          clear[1] = \"clear\";\n          setSE(!SE);\n          setCSDPushdown(!CSDPushdown);\n        }, delay);\n        break;\n      case \"Storage Engine Instance\":\n        setDBConnector(!dbConnector);\n        setCurrentIns(\"Storage Engine Instance & CSD Pushdown Work\");\n        setHost(\n          \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear\"\n        );\n        setTimeout(() => {\n          clear[2] = \"clear\";\n          setResult(!result);\n        }, delay);\n        break;\n      case \"CSD Pushdown Work\":\n        setDBConnector(!dbConnector);\n        setCurrentIns(\"Storage Engine Instance & CSD Pushdown Work\");\n        setHost(\n          \"http://10.0.5.123:8888/?hostname=10.0.5.123&username=root&password=d25zZ3VyMiE=&command=clear\"\n        );\n        setTimeout(() => {\n          clear[2] = \"clear\";\n          setResult(!result);\n        }, delay);\n        break;\n      case \"Result\":\n        const updateClear = clear.map(() => \"\");\n        setClear(updateClear);\n        setCurrentIns(\"Query Input\");\n        setWorkbench(true);\n        setSimulator(true);\n        setDBConnector(true);\n        setSE(true);\n        setFileSys(true);\n        setCSDPushdown(true);\n        break;\n    }\n  };\n\n  return (\n    <>\n      <Row className=\"header my-4 align-items-center justify-content-center\">\n        <Button\n          className=\"mx-2 btn-demo text-lg clear\"\n          color=\"warning\"\n          size=\"lg\"\n          type=\"button\"\n          value={\"Workbench\"}\n          disabled={!workbench}\n          onClick={handleDemo}\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../../assets/img/icons/demo/workbench.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}Workbench\n        </Button>\n        <i className=\"ni ni-bold-right\"></i>\n        <Button\n          className={`mx-2 bg-yellow text-white btn-demo  text-lg ${clear[0]}`}\n          size=\"lg\"\n          type=\"button\"\n          value={\"Simulator\"}\n          disabled={!simulator}\n          onClick={handleDemo}\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../../assets/img/icons/demo/simul.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}Simulator\n        </Button>\n        <i className=\"ni ni-bold-right\"></i>\n        <Button\n          className={`mx-2 btn-demo  text-lg ${clear[1]}`}\n          color=\"primary\"\n          size=\"lg\"\n          type=\"button\"\n          value={\"DB Connect Instance\"}\n          disabled={!dbConnector}\n          onClick={handleDemo}\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../../assets/img/icons/demo/dbc.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}DB Connect Instance\n        </Button>\n        <i className=\"ni ni-bold-right\"></i>\n        <Col xl=\"2\" className=\"text-center px-0\">\n          <Button\n            className={`mx-2 btn-demo text-lg mb-1 ${clear[2]}`}\n            color=\"danger\"\n            size=\"lg\"\n            type=\"button\"\n            value={\"Storage Engine Instance\"}\n            disabled={!SE}\n            onClick={handleDemo}\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/demo/se.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}Storage Engine Instance\n          </Button>\n          <Button\n            className={`mx-2 bg-purple text-white btn-demo  text-lg ${clear[2]}`}\n            size=\"lg\"\n            type=\"button\"\n            value={\"CSD Pushdown Work\"}\n            disabled={!CSDPushdown}\n            onClick={handleDemo}\n          >\n            <img\n              width={\"40px\"}\n              src={require(\"../../assets/img/icons/demo/csd.png\")}\n              alt=\"...\"\n            />\n            {\"   \"}CSD Pushdown Work\n          </Button>\n        </Col>\n        <i className=\"ni ni-bold-right\"></i>\n        <Button\n          className=\"mx-2 btn-demo  text-lg\"\n          color=\"info\"\n          size=\"lg\"\n          type=\"button\"\n          value={\"Result\"}\n          disabled={!result}\n          onClick={handleDemo}\n        >\n          <img\n            width={\"40px\"}\n            src={require(\"../../assets/img/icons/demo/workbench.png\")}\n            alt=\"...\"\n          />\n          {\"   \"}Workbench\n        </Button>\n        <div>\n          <span className=\"text-lg font-weight-bolder text-darker\">\n            For Demo\n          </span>\n        </div>\n        <Col xl=\"7\">\n          {!workbench && (\n            <Card className=\"bg-light h-100 mt-5\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                <Row className=\"pl-3\">{currentIns}</Row>\n              </CardTitle>\n              <CardBody\n                className=\"py-0 px-0 bg-darker\"\n                style={{ minHeight: \"25vh\" }}\n              >\n                <iframe src={host} width=\"100%\" height=\"500px\" title=\"wssh\" />\n              </CardBody>\n            </Card>\n          )}\n        </Col>\n      </Row>\n      <AdminNavbar />\n      <Header />\n      {/* Page content */}\n      <Container className=\"mt--7 px-0\" fluid>\n        {/*<TabMenu className=\"mt-1\" />*/}\n        <Row className=\"mt-7 justify-content-center\">\n          <Col xl=\"3\" className=\"px-0\">\n            <Card className=\"h-100 bg-lighter\">\n              <CardTitle className=\"h2 py-1  pl-3 mb-0 bg-lighter\">\n                MANAGEMENT\n              </CardTitle>\n              <CardBody\n                className=\"h2 bg-lighter mb-0\"\n                style={{ minHeight: \"25vh\" }}\n              >\n                <span>Information</span>\n                <hr className=\"my-2\" />\n                <span>Options</span>\n                <hr className=\"my-2\" />\n                <a onClick={toggleCollapse}>\n                  <i className=\"ni ni-bold-down\"></i> CSD\n                </a>\n                <Collapse isOpen={isOpen} className=\"ml-5\">\n                  <span>\n                    CSD 1 <i className=\"ni ni-check-bold text-success\"></i>\n                    <br />\n                    CSD 2 <i className=\"ni ni-check-bold text-success\"></i>\n                    <br />\n                    CSD 3 <i className=\"ni ni-ni ni-fat-remove text-danger\"></i>\n                    <br />\n                    CSD 4 <i className=\"ni ni-check-bold text-success\"></i>\n                    <br />\n                    CSD 5 <i className=\"ni ni-check-bold text-success\"></i>\n                    <br />\n                    CSD 6 <i className=\"ni ni-check-bold text-success\"></i>\n                    <br />\n                    CSD 7 <i className=\"ni ni-ni ni-fat-remove text-danger\"></i>\n                    <br />\n                    CSD 8 <i className=\"ni ni-check-bold text-success\"></i>\n                    <br />\n                  </span>\n                </Collapse>\n\n                <hr className=\"my-2\" />\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xl=\"7\" className=\"px-0\">\n            <Card className=\"bg-light h-100\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                Query Input\n                <Button\n                  color=\"primary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  className=\"ml-3\"\n                  onClick={handelNewQuery}\n                >\n                  New Query\n                </Button>\n                <Button\n                  disabled={!isEffectCheck}\n                  color=\"warning\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={generateAPI}\n                  className=\"ml-3\"\n                >\n                  Generate API\n                </Button>\n                <Button\n                  outline\n                  color=\"dark\"\n                  size=\"sm\"\n                  type=\"button\"\n                  className=\"btn-icon btn-2 rounded-circle ml-3\"\n                  onClick={toggle}\n                >\n                  <i className=\"ni ni-settings-gear-65\"></i>\n                </Button>\n                <Modal centered isOpen={modal} toggle={toggle} size=\"lg\">\n                  <ModalHeader toggle={toggle}>\n                    Set Simulator Option\n                  </ModalHeader>\n                  <ModalBody>\n                    <Form>\n                      <Row>\n                        <Col md=\"12\">\n                          <FormGroup row>\n                            <Label for=\"DBMS\" sm=\"2\" className=\"ml-2 h3\">\n                              DBMS :\n                            </Label>\n                            <Col sm=\"9\">\n                              <Input\n                                id=\"DBMS\"\n                                placeholder=\"DBMS\"\n                                type=\"text\"\n                                onChange={handleDBMS}\n                                defaultValue={DBMSSelected}\n                              />\n                            </Col>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col md=\"12\">\n                          <Row className=\"align-tiems-center ml-2\">\n                            <Label className=\"h3\">\n                              Scheduling Algorithm :{\" \"}\n                            </Label>\n                            <ButtonGroup className=\"ml-5 px-4\">\n                              <Button\n                                className=\"px-4\"\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                onClick={() =>\n                                  setAlgorithmSelected(\"CSD Metric Score\")\n                                }\n                                active={\n                                  AlgorithmSelected === \"CSD Metric Score\"\n                                }\n                              >\n                                CSD Metric Score\n                              </Button>\n                              <Button\n                                className=\"px-4\"\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                onClick={() =>\n                                  setAlgorithmSelected(\"Block Count\")\n                                }\n                                active={AlgorithmSelected === \"Block Count\"}\n                              >\n                                Block Count\n                              </Button>\n                              <Button\n                                className=\"px-4\"\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                onClick={() =>\n                                  setAlgorithmSelected(\"Minimum Overlap SST\")\n                                }\n                                active={\n                                  AlgorithmSelected === \"Minimum Overlap SST\"\n                                }\n                              >\n                                Minimum Overlap SST\n                              </Button>\n                            </ButtonGroup>\n                          </Row>\n                        </Col>\n                      </Row>\n                      <Row className=\"mt-4\">\n                        <Col md=\"6\">\n                          <Row className=\"align-tiems-center ml-2\">\n                            <Label className=\"h3\">Using Index : </Label>\n                            <ButtonGroup className=\"ml-3\">\n                              <Button\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                onClick={() => setIndexSelected(\"Use\")}\n                                active={IndexSelected === \"Use\"}\n                              >\n                                ACTIVE\n                              </Button>\n                              <Button\n                                color=\"light\"\n                                outline\n                                size=\"sm\"\n                                onClick={() => setIndexSelected(\"Disuse\")}\n                                active={IndexSelected === \"Disuse\"}\n                              >\n                                INACTIVE\n                              </Button>\n                            </ButtonGroup>\n                          </Row>\n                        </Col>\n                        <Col md=\"6\">\n                          <FormGroup row>\n                            <Label for=\"BlockSize\" sm=\"4\" className=\"h3\">\n                              Block Size :{\" \"}\n                            </Label>\n                            <Col sm=\"8\">\n                              <Input\n                                id=\"BlockSize\"\n                                placeholder=\"Block Size\"\n                                type=\"text\"\n                                onChange={handleBlockSize}\n                                defaultValue={BlockSizeSelected}\n                              />\n                            </Col>\n                          </FormGroup>\n                        </Col>\n                      </Row>\n                    </Form>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button block color=\"primary\" onClick={add}>\n                      ADD\n                    </Button>\n                  </ModalFooter>\n                </Modal>\n                <Button\n                  disabled={!isGenerateApi}\n                  color=\"success\"\n                  size=\"sm\"\n                  type=\"button\"\n                  className=\"ml-3\"\n                  onClick={handlePushdownClick}\n                >\n                  Pushdown\n                </Button>\n                <Button color=\"info\" size=\"sm\" type=\"button\" className=\"ml-3\">\n                  Template\n                </Button>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle className=\" ml-3\" split size=\"sm\">\n                    {value + \" \"}\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-menu-arrow\">\n                    {Array.from({ length: 22 }, (_, i) => i + 1).map(\n                      (index) => (\n                        <DropdownItem\n                          value={`TPC-H ${index}`}\n                          onClick={(e) => handleQueryDropdown(index, e)}\n                        >\n                          <i\n                            value={`TPC-H ${index}`}\n                            onClick={(e) => handleQueryDropdown(index, e)}\n                            className=\"ni ni-bold-right\"\n                          />\n                          <span\n                            value={`TPC-H ${index}`}\n                            onClick={(e) => handleQueryDropdown(index, e)}\n                          >{`TPC-H ${index}`}</span>\n                        </DropdownItem>\n                      )\n                    )}\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </CardTitle>\n\n              <CardBody className=\"py-0 px-0 h-100\">\n                {optionErr && (\n                  <Alert color=\"danger\">\n                    <strong>Danger!</strong> Setting Option First!\n                  </Alert>\n                )}\n                {valueErr && (\n                  <Alert color=\"danger\">\n                    <strong>Danger!</strong> Input Value First!\n                  </Alert>\n                )}\n                <Form className=\"justify-content-end ml-8 h-100\">\n                  <Input\n                    className=\"h-100 text-darker\"\n                    id=\"Query\"\n                    type=\"textarea\"\n                    innerRef={Query}\n                  />\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xl=\"2\" className=\"px-0\">\n            <Card className=\"bg-light h-100\">\n              <CardTitle className=\"h1 py-1 mb-0 bg-gradient-light text-darker text-center\">\n                Generated API\n              </CardTitle>\n              <CardBody className=\"py-0 px-3 bg-darker mh-100 overflow-auto\">\n                {isGenerateApi && (\n                  <span className=\"text-white\">\n                    GET/\n                    <br />\n                    HOST: http://10.0.5.122:34568/\n                    <br />\n                    Content-Type:application/json\n                    <br />\n                    {\"{\"}\n                    <br />\n                    <span className=\"text-green\">\n                      queryID:\"TPC-H_01\",\n                      <br />\n                      query:{generate}\n                      <br />\n                    </span>\n                    {\"}\"}\n                  </span>\n                )}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\" style={{ maxHeight: \"40vh\" }}>\n          <Col xl=\"3\" className=\"px-0\">\n            <Card\n              className=\"bg-white h-100\"\n              style={{ maxHeight: \"40vh\", minHeight: \"35vh\" }}\n            >\n              <CardTitle className=\"h2 py-1 pl-3 mb-0 bg-light text-darker\">\n                <Row className=\" h2 pl-3 align-items-center\">\n                  Option\n                  <Nav className=\"ml-5\" pills>\n                    <NavItem className=\"pr-0\">\n                      <NavLink\n                        className={classnames(\"py-1\", {\n                          active: activeNav === true,\n                        })}\n                        href=\"#pablo\"\n                        onClick={(e) => toggleNavs(e, true)}\n                      >\n                        <span className=\"d-none d-md-block\">Option</span>\n                        <span className=\"d-md-none\">M</span>\n                      </NavLink>\n                    </NavItem>\n                    <NavItem>\n                      <NavLink\n                        className={classnames(\"py-1\", {\n                          active: activeNav === false,\n                        })}\n                        data-toggle=\"tab\"\n                        href=\"#pablo\"\n                        onClick={(e) => toggleNavs(e, false)}\n                      >\n                        <span className=\"d-none d-md-block\">Environment</span>\n                        <span className=\"d-md-none\">W</span>\n                      </NavLink>\n                    </NavItem>\n                  </Nav>\n                </Row>\n              </CardTitle>\n              <CardBody className=\"py-0 px-0 h-100\">\n                <Table\n                  className=\"align-items-center text-center bg-white\"\n                  responsive\n                  bordered\n                >\n                  {activeNav ? (\n                    <tbody>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>DBMS</h3>\n                        </th>\n                        <td>\n                          <h4>{option[0]}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>Algorithm</h3>\n                        </th>\n                        <td>\n                          <h4>{option[1]}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>Index</h3>\n                        </th>\n                        <td>\n                          <h4>{option[2]}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>Block Size</h3>\n                        </th>\n                        <td>\n                          <h4>{option[3]}</h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  ) : (\n                    <tbody>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>Network</h3>\n                        </th>\n                        <td>\n                          <h4>1024 KB/s</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>CPU</h3>\n                        </th>\n                        <td>\n                          <h4>8 Core</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <th scope=\"row\">\n                          <h3>Memory</h3>\n                        </th>\n                        <td>\n                          <h4>200 G</h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                  )}\n                </Table>\n              </CardBody>\n            </Card>\n          </Col>\n          <Col xl=\"7\" className=\"px-0\">\n            <Card className=\"bg-white h-50\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                Query Snippet\n              </CardTitle>\n              <CardBody className=\"py-0 px-0 overflow-auto\">\n                <Table\n                  className=\"align-items-center text-center bg-white \"\n                  responsive\n                >\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Num\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Snippet Type\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Projection Colume\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Filter Clause\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Order by\n                      </th>\n                      <th scope=\"col\" className=\"text-sm\">\n                        Group by\n                      </th>\n                    </tr>\n                  </thead>\n                  {Array.from({ length: snippet.length }, (_, i) => i).map(\n                    (index) => (\n                      <tr>\n                        <th scope=\"row\">\n                          {snippet[index][\"Snippet Type\"] && index + 1}\n                        </th>\n                        <td>\n                          <h4>{snippet[index][\"Snippet Type\"]}</h4>\n                        </td>\n                        <td>\n                          <h4>{snippet[index][\"Projection Column\"]}</h4>\n                        </td>\n                        <td>\n                          <h4>{snippet[index][\"Filter Clause\"]}</h4>\n                        </td>\n                        <td>\n                          <h4>{snippet[index][\"Order by\"]}</h4>\n                        </td>\n                        <td>\n                          <h4>{snippet[index][\"Group by\"]}</h4>\n                        </td>\n                      </tr>\n                    )\n                  )}\n                </Table>\n              </CardBody>\n            </Card>\n            <Card className=\"bg-white h-50\">\n              <CardTitle className=\"h1 py-1 pl-3 mb-0 bg-gradient-light text-darker\">\n                <Row className=\"pl-3 align-items-center\">\n                  Pushdown Effect Check\n                  <Nav className=\"ml-8\" pills>\n                    <NavItem className=\"pr-0\">\n                      <NavLink\n                        className={classnames(\"py-1\", {\n                          active: activeNav2 === true,\n                        })}\n                        href=\"#pablo\"\n                        onClick={(e) => toggleNavs2(e, true)}\n                      >\n                        <span className=\"d-none d-md-block\">\n                          Pushdown Effect Check\n                        </span>\n                        <span className=\"d-md-none\">M</span>\n                      </NavLink>\n                    </NavItem>\n                    <NavItem>\n                      <NavLink\n                        className={classnames(\"py-1\", {\n                          active: activeNav2 === false,\n                        })}\n                        data-toggle=\"tab\"\n                        href=\"#pablo\"\n                        onClick={(e) => toggleNavs2(e, false)}\n                      >\n                        <span className=\"d-none d-md-block\">Query Result</span>\n                        <span className=\"d-md-none\">W</span>\n                      </NavLink>\n                    </NavItem>\n                  </Nav>\n                  {activeNav2 && (\n                    <UncontrolledDropdown nav>\n                      <DropdownToggle className=\" ml-3\" split size=\"sm\">\n                        {metric + \" \"}\n                      </DropdownToggle>\n                      <DropdownMenu className=\"dropdown-menu-arrow\">\n                        <DropdownItem\n                          value={\"Power\"}\n                          onClick={handleMetricDropdown}\n                        >\n                          <i\n                            value={\"Power\"}\n                            onClick={handleMetricDropdown}\n                            className=\"ni ni-bold-right\"\n                          />\n                          <span value={\"Power\"} onClick={handleMetricDropdown}>\n                            Power (W)\n                          </span>\n                        </DropdownItem>\n                        <DropdownItem\n                          value={\"Network\"}\n                          onClick={handleMetricDropdown}\n                        >\n                          <i\n                            value={\"Network\"}\n                            onClick={handleMetricDropdown}\n                            className=\"ni ni-bold-right\"\n                          />\n                          <span\n                            value={\"Network\"}\n                            onClick={handleMetricDropdown}\n                          >\n                            Network\n                          </span>\n                        </DropdownItem>\n                        <DropdownItem\n                          value={\"CPU\"}\n                          onClick={handleMetricDropdown}\n                        >\n                          <i\n                            value={\"CPU\"}\n                            onClick={handleMetricDropdown}\n                            className=\"ni ni-bold-right\"\n                          />\n                          <span value={\"CPU\"} onClick={handleMetricDropdown}>\n                            CPU\n                          </span>\n                        </DropdownItem>\n                      </DropdownMenu>\n                    </UncontrolledDropdown>\n                  )}\n                </Row>\n              </CardTitle>\n              {isEffectCheck && (\n                <CardBody className=\"py-0 px-0\">\n                  {activeNav2 ? (\n                    <div className=\"chart overflow-auto\">\n                      {/* Chart wrapper */}\n                      <HorizontalBar\n                        data={chartData}\n                        options={pushdownchart.options}\n                      />\n                    </div>\n                  ) : (\n                    <Table\n                      className=\"align-items-center text-center bg-white \"\n                      responsive\n                    >\n                      <thead className=\"thead-light\">\n                        <tr>\n                          <th scope=\"col\" className=\"text-sm\">\n                            Num\n                          </th>\n                          <th scope=\"col\" className=\"text-sm\">\n                            Snippet Type\n                          </th>\n                          <th scope=\"col\" className=\"text-sm\">\n                            Projection Colume\n                          </th>\n                          <th scope=\"col\" className=\"text-sm\">\n                            Filter Clause\n                          </th>\n                          <th scope=\"col\" className=\"text-sm\">\n                            Order by\n                          </th>\n                          <th scope=\"col\" className=\"text-sm\">\n                            Group by\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <th scope=\"row\">\n                            <h3>1</h3>\n                          </th>\n                          <td>Scan</td>\n                          <td>5</td>\n                          <td>5</td>\n                          <td>0</td>\n                          <td>0</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">\n                            <h3>2</h3>\n                          </th>\n                          <td>Scan</td>\n                          <td>3</td>\n                          <td>3</td>\n                          <td>0</td>\n                          <td>0</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">\n                            <h3>3</h3>\n                          </th>\n                          <td>Aggregation</td>\n                          <td>5</td>\n                          <td>0</td>\n                          <td>0</td>\n                          <td>1</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">\n                            <h3>4</h3>\n                          </th>\n                          <td>Inner Join</td>\n                          <td>6</td>\n                          <td>0</td>\n                          <td>0</td>\n                          <td>0</td>\n                        </tr>\n                        <tr>\n                          <th scope=\"row\">\n                            <h3>5</h3>\n                          </th>\n                          <td>Aggregation</td>\n                          <td>6</td>\n                          <td>0</td>\n                          <td>2</td>\n                          <td>0</td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  )}\n                </CardBody>\n              )}\n            </Card>\n          </Col>\n          <Col xl=\"2\" className=\"px-0\">\n            <Card\n              className=\"bg-white h-100 overflow-auto\"\n              style={{ maxHeight: \"40vh\" }}\n            >\n              <CardTitle className=\"h1 py-1 mb-0 bg-gradient-light text-darker text-center\">\n                Effect Result\n              </CardTitle>\n              <CardBody className=\"py-0 px-0\">\n                {isEffectCheck && (\n                  <Table striped responsive>\n                    <tbody className=\"text-center\">\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>SSD Resource Usage Forcast</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>{SSDUsageForcast + \" W\"}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>CSD Resource Usage Forcast</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>{CSDUsageForcast + \" W\"}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>Conservation Effect Forcast</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4>{HostConservationEffectForcast + \" %\"}</h4>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td className=\"font-weight-bold\">\n                          <h3>Pushdown T/F</h3>\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>\n                          <h4 className=\"text-danger\">Pushdown</h4>\n                        </td>\n                      </tr>\n                    </tbody>\n                    {isPushdown && (\n                      <tbody className=\"text-center\">\n                        <tr className=\"w-100\">\n                          <td className=\"font-weight-bold\">\n                            <h3>Pushdown Resource Usage</h3>\n                          </td>\n                        </tr>\n                        <tr className=\"w-100\">\n                          <td>\n                            <h4>{energyUsage + \" W\"}</h4>\n                          </td>\n                        </tr>\n                        <tr className=\"w-100\">\n                          <td className=\"font-weight-bold\">\n                            <h3>Prediction Error</h3>\n                          </td>\n                        </tr>\n                        <tr className=\"w-100\">\n                          <td>\n                            <h4>{error + \" %\"}</h4>\n                          </td>\n                        </tr>\n                        <tr className=\"w-100\">\n                          <td className=\"font-weight-bold\">\n                            <h3>Conservation Effect</h3>\n                          </td>\n                        </tr>\n                        <tr className=\"w-100\">\n                          <td>\n                            <h4 className=\"text-danger\">\n                              {HostConservationEffect + \" %\"}\n                            </h4>\n                          </td>\n                        </tr>\n                      </tbody>\n                    )}\n                  </Table>\n                )}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"mt-5\">\n          <Col xl=\"12\">\n            {template && (\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-1 pb-2\">\n                  <h2 className=\"text-primary\">Template API</h2>\n                </CardHeader>\n                <CardBody>\n                  <Row>\n                    <Col xl=\"6\">\n                      <Form>\n                        <Row className=\"mt-3\">\n                          <Col md=\"10\">\n                            <Input\n                              id=\"Table Name\"\n                              placeholder=\"Table Name\"\n                              type=\"text\"\n                              onChange={(e) => setTableName(e.target.value)}\n                              onKeyPress={handleInputValue}\n                            />\n                          </Col>\n                          <Button\n                            className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                            type=\"button\"\n                            onClick={handleInputValue}\n                          >\n                            <i className=\"ni ni-fat-add\" />\n                          </Button>\n                        </Row>\n                        <Row className=\"mt-3\">\n                          <Col md=\"10\">\n                            <Input\n                              id=\"Where\"\n                              placeholder=\"Where\"\n                              type=\"text\"\n                              onChange={(e) => setWhereClause(e.target.value)}\n                              onKeyPress={handleInputValue}\n                            />\n                          </Col>\n                          <Button\n                            className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                            type=\"button\"\n                            onClick={handleInputValue}\n                          >\n                            <i className=\"ni ni-fat-add\" />\n                          </Button>\n                        </Row>\n                        <Row className=\"mt-3\">\n                          <Col md=\"10\">\n                            <Input\n                              id=\"Column\"\n                              placeholder=\"Column\"\n                              type=\"text\"\n                              onKeyPress={handleInputValue}\n                              onChange={(e) => setColumnName(e.target.value)}\n                            />\n                          </Col>\n                          <Button\n                            className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                            type=\"button\"\n                            onClick={handleInputValue}\n                          >\n                            <i className=\"ni ni-fat-add\" />\n                          </Button>\n                        </Row>\n                        <Row className=\"mt-3\">\n                          <Col xl=\"6\">\n                            <Row>\n                              <Col md=\"10\">\n                                <Input\n                                  id=\"OrderBy\"\n                                  placeholder=\"OrderBy\"\n                                  type=\"text\"\n                                  onKeyPress={handleInputValue}\n                                  onChange={(e) => setOrderBy(e.target.value)}\n                                />\n                              </Col>\n                              <Button\n                                className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                                type=\"button\"\n                                onClick={handleInputValue}\n                              >\n                                <i className=\"ni ni-fat-add\" />\n                              </Button>\n                            </Row>\n                          </Col>\n                          <Col xl=\"6\">\n                            <Row>\n                              <Col md=\"10\">\n                                <Input\n                                  id=\"GroupBy\"\n                                  placeholder=\"GroupBy\"\n                                  type=\"text\"\n                                  onKeyPress={handleInputValue}\n                                  onChange={(e) => setGroupBy(e.target.value)}\n                                />\n                              </Col>\n                              <Button\n                                className=\"icon icon-shape bg-dark text-white rounded-circle shadow\"\n                                type=\"button\"\n                                onClick={handleInputValue}\n                              >\n                                <i className=\"ni ni-fat-add\" />\n                              </Button>\n                            </Row>\n                          </Col>\n                        </Row>\n                      </Form>\n                    </Col>\n                    <Col xl=\"6\">\n                      <Form>\n                        <h3 className=\"mb-2\">Generated Query</h3>\n                        <Input\n                          id=\"exampleFormControlTextarea1\"\n                          innerRef={inputRef}\n                          placeholder=\"Write a large text here ...\"\n                          rows=\"9\"\n                          type=\"textarea\"\n                          disabled\n                        />\n                        <div className=\"mt-4\">\n                          <Button\n                            block\n                            color=\"primary\"\n                            size=\"lg\"\n                            type=\"button\"\n                            onClick={generateAPI}\n                          >\n                            Generate API\n                          </Button>\n                        </div>\n                      </Form>\n                    </Col>\n                  </Row>\n                </CardBody>\n              </Card>\n            )}\n          </Col>\n        </Row>\n        {/* {generate && (\n          <Row>\n            <Col xl=\"12\" className=\"text-right\">\n              <img\n                src={require(\"../../assets/img/brand/generate.png\")}\n                width={\"50%\"}\n                height={\"80%\"}\n                alt=\"...\"\n              />\n            </Col>\n          </Row>\n        )} */}\n      </Container>\n    </>\n  );\n};\n\nexport default Pushdown;\n","/root/Web/workbench/client/src/components/Headers/Header.js",["335","336","337","338","339","340","341"],[],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n\n// reactstrap components\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Row, Col } from \"reactstrap\";\nconst TabMenu = styled.ul`\n  background: #e9ecef;\n  color: #8898aa;\n  font-weight: bold;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  list-style: none;\n  margin-top: 10px;\n\n  .submenu {\n    // 기본 Tabmenu 에 대한 CSS를 구현\n    display: flex;\n    /* justify-content: space-between;\n    width: 380px;\n    heigth: 30px; */\n    width: calc(100% / 5);\n    padding: 10px;\n    font-size: 15px;\n    transition: 0.5s;\n    border-radius: 10px 10px 0px 0px;\n  }\n\n  .focused {\n    //선택된 Tabmenu 에만 적용되는 CSS를 구현\n    background: linear-gradient(87deg, #adb5bd 0, #adaebd 100%) !important;\n    color: rgb(21, 20, 20);\n  }\n\n  & div.desc {\n    text-align: center;\n  }\n`;\n\nconst Desc = styled.div``;\n\nconst Header = () => {\n  const [currentTab, clickTab] = useState(0);\n  const [menuArr, setMenuArr] = useState([\n    { name: \"Add Tab\", content: \"Tab menu ONE\" },\n  ]);\n\n  const selectMenuHandler = (index) => {\n    // parameter로 현재 선택한 인덱스 값을 전달해야 하며, 이벤트 객체(event)는 쓰지 않는다\n    // 해당 함수가 실행되면 현재 선택된 Tab Menu 가 갱신.\n    clickTab(index);\n    if (index === menuArr.length - 1 && menuArr.length <= 10) {\n      menuArr[menuArr.length - 1] = {\n        name: \"New Tab\",\n        content: \"Tab menu ONE\",\n      };\n      if (menuArr.length === 10) setMenuArr([...menuArr]);\n      else\n        setMenuArr([...menuArr, { name: \"Add Tab\", content: \"Tab menu ONE\" }]);\n    }\n  };\n  return (\n    <>\n      <div className=\"header bg-lighter pb-2  pt-md-5 \">\n        {/* <Row>\n          <Col xl=\"1\" className=\"px-0\"></Col>\n\n          <Col xl=\"10\" className=\"px-0\">\n            <TabMenu className=\"my-0\">\n              {/* <li className=\"submenu\">{menuArr[0].name}</li>\n          <li className=\"submenu\">{menuArr[1].name}</li>\n          <li className=\"submenu\">{menuArr[2].name}</li>\n              {menuArr.map((el, index) => (\n                <li\n                  key={index}\n                  className={\n                    index === currentTab ? \"submenu focused\" : \"submenu\"\n                  }\n                  onClick={() => selectMenuHandler(index)}\n                >\n                  {el.name}\n                </li>\n              ))}\n            </TabMenu>\n          </Col>\n        </Row> */}\n      </div>\n      <div className=\"header bg-gradient-light pb-4  pt-md-5\"></div>\n    </>\n  );\n};\n\nexport default Header;\n","/root/Web/workbench/client/src/components/Headers/Header2.js",[],[],"/root/Web/workbench/client/src/variables/charts.js",["342"],["343"],"/*!\n\n=========================================================\n* Argon Dashboard React - v1.2.2\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2022 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nconst Chart = require(\"chart.js\");\n//\n// Chart extension for making the bars rounded\n// Code from: https://codepen.io/jedtrow/full/ygRYgo\n//\n\nChart.elements.Rectangle.prototype.draw = function () {\n  var ctx = this._chart.ctx;\n  var vm = this._view;\n  var left, right, top, bottom, signX, signY, borderSkipped, radius;\n  var borderWidth = vm.borderWidth;\n  // Set Radius Here\n  // If radius is large enough to cause drawing errors a max radius is imposed\n  var cornerRadius = 0;\n\n  if (!vm.horizontal) {\n    // bar\n    left = vm.x - vm.width / 2;\n    right = vm.x + vm.width / 2;\n    top = vm.y;\n    bottom = vm.base;\n    signX = 1;\n    signY = bottom > top ? 1 : -1;\n    borderSkipped = vm.borderSkipped || \"bottom\";\n  } else {\n    // horizontal bar\n    left = vm.base;\n    right = vm.x;\n    top = vm.y - vm.height / 2;\n    bottom = vm.y + vm.height / 2;\n    signX = right > left ? 1 : -1;\n    signY = 1;\n    borderSkipped = vm.borderSkipped || \"left\";\n  }\n\n  // Canvas doesn't allow us to stroke inside the width so we can\n  // adjust the sizes to fit if we're setting a stroke on the line\n  if (borderWidth) {\n    // borderWidth shold be less than bar width and bar height.\n    var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\n    var halfStroke = borderWidth / 2;\n    // Adjust borderWidth when bar top position is near vm.base(zero).\n    var borderLeft = left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\n    var borderRight =\n      right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\n    var borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\n    var borderBottom =\n      bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0);\n    // not become a vertical line?\n    if (borderLeft !== borderRight) {\n      top = borderTop;\n      bottom = borderBottom;\n    }\n    // not become a horizontal line?\n    if (borderTop !== borderBottom) {\n      left = borderLeft;\n      right = borderRight;\n    }\n  }\n\n  ctx.beginPath();\n  ctx.fillStyle = vm.backgroundColor;\n  ctx.strokeStyle = vm.borderColor;\n  ctx.lineWidth = borderWidth;\n\n  // Corner points, from bottom-left to bottom-right clockwise\n  // | 1 2 |\n  // | 0 3 |\n  var corners = [\n    [left, bottom],\n    [left, top],\n    [right, top],\n    [right, bottom],\n  ];\n\n  // Find first (starting) corner with fallback to 'bottom'\n  var borders = [\"bottom\", \"left\", \"top\", \"right\"];\n  var startCorner = borders.indexOf(borderSkipped, 0);\n  if (startCorner === -1) {\n    startCorner = 0;\n  }\n\n  function cornerAt(index) {\n    return corners[(startCorner + index) % 4];\n  }\n\n  // Draw rectangle from 'startCorner'\n  var corner = cornerAt(0);\n  ctx.moveTo(corner[0], corner[1]);\n\n  for (var i = 1; i < 4; i++) {\n    corner = cornerAt(i);\n    let nextCornerId = i + 1;\n    if (nextCornerId === 4) {\n      nextCornerId = 0;\n    }\n\n    // let nextCorner = cornerAt(nextCornerId);\n\n    let width = corners[2][0] - corners[1][0];\n    let height = corners[0][1] - corners[1][1];\n    let x = corners[1][0];\n    let y = corners[1][1];\n    // eslint-disable-next-line\n    var radius = cornerRadius;\n\n    // Fix radius being too large\n    if (radius > height / 2) {\n      radius = height / 2;\n    }\n    if (radius > width / 2) {\n      radius = width / 2;\n    }\n\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n  }\n\n  ctx.fill();\n  if (borderWidth) {\n    ctx.stroke();\n  }\n};\n\nvar mode = \"light\"; //(themeMode) ? themeMode : 'light';\nvar fonts = {\n  base: \"Open Sans\",\n};\n\n// Colors\nvar colors = {\n  gray: {\n    100: \"#f6f9fc\",\n    200: \"#e9ecef\",\n    300: \"#dee2e6\",\n    400: \"#ced4da\",\n    500: \"#adb5bd\",\n    600: \"#8898aa\",\n    700: \"#525f7f\",\n    800: \"#32325d\",\n    900: \"#212529\",\n  },\n  theme: {\n    gradient_primary: \"linear-gradient(87deg, #5e72e4 0, #825ee4 100%)\",\n    default: \"#172b4d\",\n    primary: \"#5e72e4\",\n    secondary: \"#f4f5f7\",\n    info: \"#11cdef\",\n    success: \"#2dce89\",\n    danger: \"#f5365c\",\n    warning: \"#fb6340\",\n  },\n  black: \"#12263F\",\n  white: \"#FFFFFF\",\n  transparent: \"transparent\",\n};\n\n// Methods\n\n// Chart.js global options\nfunction chartOptions() {\n  // Options\n  var options = {\n    defaults: {\n      global: {\n        responsive: true,\n        maintainAspectRatio: false,\n        defaultColor: mode === \"dark\" ? colors.gray[700] : colors.gray[600],\n        defaultFontColor: mode === \"dark\" ? colors.gray[700] : colors.gray[600],\n        defaultFontFamily: fonts.base,\n        defaultFontSize: 13,\n        layout: {\n          padding: 0,\n        },\n        legend: {\n          display: true,\n          position: \"bottom\",\n          labels: {\n            usePointStyle: true,\n            padding: 16,\n          },\n        },\n        elements: {\n          point: {\n            radius: 3,\n            backgroundColor: colors.theme[\"info\"],\n          },\n          line: {\n            tension: 0,\n            borderWidth: 3,\n            borderColor: colors.theme[\"info\"],\n            backgroundColor: colors.transparent,\n          },\n          rectangle: {\n            backgroundColor: colors.theme[\"primary\"],\n          },\n          arc: {\n            backgroundColor: colors.theme[\"primary\"],\n            borderColor: mode === \"dark\" ? colors.gray[800] : colors.white,\n            borderWidth: 4,\n          },\n        },\n        tooltips: {\n          enabled: true,\n          mode: \"index\",\n          intersect: false,\n        },\n      },\n      doughnut: {\n        cutoutPercentage: 83,\n        legendCallback: function (chart) {\n          var data = chart.data;\n          var content = \"\";\n\n          data.labels.forEach(function (label, index) {\n            var bgColor = data.datasets[0].backgroundColor[index];\n\n            content += '<span class=\"chart-legend-item\">';\n            content +=\n              '<i class=\"chart-legend-indicator\" style=\"background-color: ' +\n              bgColor +\n              '\"></i>';\n            content += label;\n            content += \"</span>\";\n          });\n\n          return content;\n        },\n      },\n    },\n  };\n\n  // yAxes\n  Chart.scaleService.updateScaleDefaults(\"linear\", {\n    gridLines: {\n      borderDash: [2],\n      borderDashOffset: [2],\n      color: mode === \"dark\" ? colors.gray[900] : colors.gray[300],\n      drawBorder: false,\n      drawTicks: false,\n      lineWidth: 0,\n      zeroLineWidth: 0,\n      zeroLineColor: mode === \"dark\" ? colors.gray[900] : colors.gray[300],\n      zeroLineBorderDash: [2],\n      zeroLineBorderDashOffset: [2],\n    },\n    ticks: {\n      beginAtZero: true,\n      padding: 10,\n      callback: function (value) {\n        if (!(value % 10)) {\n          return value;\n        }\n      },\n    },\n  });\n\n  // xAxes\n  Chart.scaleService.updateScaleDefaults(\"category\", {\n    gridLines: {\n      drawBorder: false,\n      drawOnChartArea: false,\n      drawTicks: false,\n    },\n    ticks: {\n      padding: 20,\n    },\n  });\n\n  return options;\n}\n\n// Parse global options\nfunction parseOptions(parent, options) {\n  for (var item in options) {\n    if (typeof options[item] !== \"object\") {\n      parent[item] = options[item];\n    } else {\n      parseOptions(parent[item], options[item]);\n    }\n  }\n}\n\n// Example 1 of Chart inside src/views/Index.js (Sales value - Card)\nlet pushdownchart = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: colors.gray[900],\n            zeroLineColor: colors.gray[900],\n          },\n          ticks: {\n            callback: function (value) {\n              if (!(value % 10)) {\n                return value;\n              }\n            },\n          },\n        },\n      ],\n    },\n    centerAlign: true, // 가운데 정렬 스타일 추가\n    tooltips: {\n      callbacks: {\n        label: function (item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1 && item.yLabel > 0) {\n            content += label;\n          }\n\n          if (data.datasets.length > 1 && item.yLabel > 0) {\n            content += \" \" + yLabel;\n          }\n          return content;\n        },\n      },\n    },\n  },\n  powerData: (canvas) => {\n    const pushdowndata = {\n      labels: [\n        \"Total without CSD (SSD)\",\n        \"Total with CSD\",\n        \"Storage Engine\",\n        \"CSD\",\n      ],\n      datasets: [\n        {\n          label: \"SSD\",\n          data: [661, 0, 0, 0],\n          backgroundColor: colors.theme[\"primary\"],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"Storage Engine\",\n          data: [0, 111, 111, 0],\n          backgroundColor: colors.theme[\"warning\"],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD1\",\n          data: [0, 21, 0, 21],\n          backgroundColor: colors.theme[\"primary\"],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD2\",\n          data: [0, 21, 0, 21],\n          backgroundColor: colors.theme[\"danger\"],\n          pointBackgroundColor: colors.theme[\"danger\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD3\",\n          data: [0, 21, 0, 21],\n          backgroundColor: colors.theme[\"success\"],\n          pointBackgroundColor: colors.theme[\"success\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD4\",\n          data: [0, 21, 0, 21],\n          backgroundColor: colors.theme[\"info\"],\n          pointBackgroundColor: colors.theme[\"info\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD5\",\n          data: [0, 21, 0, 21],\n          backgroundColor: colors.theme[\"warning\"],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD6\",\n          data: [0, 21, 0, 21],\n          backgroundColor: \"#8965e0\",\n          pointBackgroundColor: \"#8965e0\",\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD7\",\n          data: [0, 21, 0, 21],\n          backgroundColor: \"#ffd600\",\n          pointBackgroundColor: \"#ffd600\",\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n        {\n          label: \"CSD8\",\n          data: [0, 21, 0, 21],\n          backgroundColor: \"#f3a4b5\",\n          pointBackgroundColor: \"#f3a4b5\",\n          maxBarThickness: 10,\n          stack: \"power\",\n        },\n      ],\n    };\n    return pushdowndata;\n  },\n  networkData: (canvas) => {\n    const pushdowndata = {\n      labels: [\"Result\", \"Storage Engine\", \"CSD\"],\n      datasets: [\n        {\n          label: \"Storage Engine\",\n          data: [90, 90, 0],\n          backgroundColor: colors.theme[\"warning\"],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          maxBarThickness: 10,\n          stack: \"network\",\n        },\n        {\n          label: \"Total CSD\",\n          data: [24, 0, 0],\n          backgroundColor: colors.theme[\"primary\"],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          maxBarThickness: 10,\n          stack: \"network\",\n        },\n        {\n          label: \"CSD1\",\n          data: [0, 0, 3],\n          backgroundColor: colors.theme[\"danger\"],\n          pointBackgroundColor: colors.theme[\"danger\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD2\",\n          data: [0, 0, 3],\n          backgroundColor: colors.theme[\"warning\"],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD3\",\n          data: [0, 0, 3],\n          backgroundColor: colors.theme[\"success\"],\n          pointBackgroundColor: colors.theme[\"success\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD4\",\n          data: [0, 0, 3],\n          backgroundColor: colors.theme[\"info\"],\n          pointBackgroundColor: colors.theme[\"info\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD5\",\n          data: [0, 0, 3],\n          backgroundColor: colors.theme[\"primary\"],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD6\",\n          data: [0, 0, 3],\n          backgroundColor: \"#8965e0\",\n          pointBackgroundColor: \"#8965e0\",\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD7\",\n          data: [0, 0, 3],\n          backgroundColor: \"#ffd600\",\n          pointBackgroundColor: \"#ffd600\",\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD8\",\n          data: [0, 0, 3],\n          backgroundColor: \"#f3a4b5\",\n          pointBackgroundColor: \"#f3a4b5\",\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n      ],\n    };\n    return pushdowndata;\n  },\n  cpuData: (canvas) => {\n    const pushdowndata = {\n      labels: [\"Result\", \"Storage Engine\", \"CSD\"],\n      datasets: [\n        {\n          label: \"Storage Engine\",\n          data: [120, 120, 0],\n          backgroundColor: colors.theme[\"warning\"],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          maxBarThickness: 10,\n          stack: \"CPU\",\n        },\n        {\n          label: \"Total CSD\",\n          data: [80, 0, 0],\n          backgroundColor: colors.theme[\"primary\"],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          maxBarThickness: 10,\n          stack: \"CPU\",\n        },\n        {\n          label: \"CSD1\",\n          data: [0, 0, 5],\n          backgroundColor: colors.theme[\"danger\"],\n          pointBackgroundColor: colors.theme[\"danger\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD2\",\n          data: [0, 0, 5],\n          backgroundColor: colors.theme[\"warning\"],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD3\",\n          data: [0, 0, 5],\n          backgroundColor: colors.theme[\"success\"],\n          pointBackgroundColor: colors.theme[\"success\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD4\",\n          data: [0, 0, 5],\n          backgroundColor: colors.theme[\"info\"],\n          pointBackgroundColor: colors.theme[\"info\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD5\",\n          data: [0, 0, 5],\n          backgroundColor: colors.theme[\"primary\"],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD6\",\n          data: [0, 0, 5],\n          backgroundColor: \"#8965e0\",\n          pointBackgroundColor: \"#8965e0\",\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD7\",\n          data: [0, 0, 5],\n          backgroundColor: \"#ffd600\",\n          pointBackgroundColor: \"#ffd600\",\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n        {\n          label: \"CSD8\",\n          data: [0, 0, 5],\n          backgroundColor: \"#f3a4b5\",\n          pointBackgroundColor: \"#f3a4b5\",\n          maxBarThickness: 10,\n          stack: \"CSD\",\n        },\n      ],\n    };\n    return pushdowndata;\n  },\n};\nlet energychart = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: colors.gray[900],\n            zeroLineColor: colors.gray[900],\n          },\n          ticks: {\n            callback: function (value) {\n              if (!(value % 10)) {\n                return value;\n              }\n            },\n          },\n        },\n      ],\n    },\n    centerAlign: true, // 가운데 정렬 스타일 추가\n    tooltips: {\n      callbacks: {\n        label: function (item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n\n          content += \" \" + yLabel;\n          return content;\n        },\n      },\n    },\n  },\n  data: (canvas) => {\n    const energydata = {\n      labels: [\"CPU\", \"Net\", \"Power\", \"Time\"],\n      datasets: [\n        {\n          label: \"Query 1\",\n          data: [90, 80, 60, 80],\n          pointBackgroundColor: colors.theme[\"primary\"],\n          borderColor: colors.theme[\"primary\"],\n        },\n        {\n          label: \"Query 2\",\n          data: [45, 60, 50, 60],\n        },\n        {\n          label: \"Query 3\",\n          data: [85, 80, 75, 90],\n          pointBackgroundColor: colors.theme[\"warning\"],\n          borderColor: colors.theme[\"warning\"],\n        },\n        {\n          label: \"Query 4\",\n          data: [10, 20, 40, 20],\n          pointBackgroundColor: colors.theme[\"danger\"],\n          borderColor: colors.theme[\"danger\"],\n        },\n      ],\n    };\n    return energydata;\n  },\n};\n\n// Example 2 of Chart inside src/views/Index.js (Total orders - Card)\nlet energy2chart = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            callback: function (value) {\n              if (!(value % 10)) {\n                //return '$' + value + 'k'\n                return value;\n              }\n            },\n          },\n        },\n      ],\n      xAxes: [\n        {\n          ticks: {\n            font: {\n              weight: \"bold\", // 레이블을 굵은 글씨로 설정\n            },\n            afterTickToLabelConversion: function (data) {\n              // 마지막 눈금의 레이블을 가져와서 설정\n              var xLabels = data.ticks;\n              xLabels[xLabels.length - 1].fontStyle = \"bold\";\n            },\n          },\n        },\n      ],\n    },\n    tooltips: {\n      callbacks: {\n        label: function (item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n          content += yLabel;\n          return content;\n        },\n      },\n    },\n  },\n  data: (canvas) => {\n    return {\n      labels: [\n        \"16:17:30\",\n        \"16:17:40\",\n        \"16:17:50\",\n        \"16:18:00\",\n        \"16:18:10\",\n        \"16:18:20\",\n        \"16:18:30\",\n        \"16:18:40\",\n      ],\n      datasets: [\n        {\n          label: \"CPU\",\n          data: [60, 10, 35, 35, 20, 15, 20, 5],\n        },\n        {\n          label: \"Memory\",\n          data: [60, 20, 35, 35, 20, 15, 20, 5],\n        },\n        {\n          label: \"Disk\",\n          data: [60, 30, 35, 35, 20, 15, 20, 5],\n        },\n        {\n          label: \"Network\",\n          data: [60, 40, 35, 35, 20, 15, 20, 5],\n        },\n        {\n          label: \"Block Count\",\n          data: [60, 50, 35, 35, 20, 15, 20, 5],\n        },\n      ],\n    };\n  },\n  data1: (canvas) => {\n    let energyData = energychart.data();\n    return {\n      labels: energyData.labels,\n      datasets: [\n        {\n          label: \"CPU\",\n          data: energyData.datasets[0].data,\n          maxBarThickness: 10,\n        },\n      ],\n    };\n  },\n  data2: (canvas) => {\n    let energyData = energychart.data();\n    return {\n      labels: energyData.labels,\n      datasets: [\n        {\n          label: \"Memory\",\n          data: energyData.datasets[1].data,\n          maxBarThickness: 10,\n        },\n      ],\n    };\n  },\n  data3: (canvas) => {\n    let energyData = energychart.data();\n    return {\n      labels: energyData.labels,\n      datasets: [\n        {\n          label: \"Disk\",\n          data: energyData.datasets[2].data,\n          maxBarThickness: 10,\n        },\n      ],\n    };\n  },\n  data4: (canvas) => {\n    let energyData = energychart.data();\n    return {\n      labels: energyData.labels,\n      datasets: [\n        {\n          label: \"Network\",\n          data: energyData.datasets[3].data,\n          maxBarThickness: 10,\n        },\n      ],\n    };\n  },\n  data5: (canvas) => {\n    let energyData = energychart.data();\n    return {\n      labels: energyData.labels,\n      datasets: [\n        {\n          label: \"Block Count\",\n          data: energyData.datasets[4].data,\n          maxBarThickness: 10,\n        },\n      ],\n    };\n  },\n};\n\nlet chartExample3 = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: colors.gray[900],\n            zeroLineColor: colors.gray[900],\n          },\n          ticks: {\n            callback: function (value) {\n              if (!(value % 10)) {\n                return value;\n              }\n            },\n          },\n        },\n      ],\n    },\n    tooltips: {\n      callbacks: {\n        label: function (item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n\n          content += \" \" + yLabel;\n          return content;\n        },\n      },\n    },\n  },\n  data: (canvas) => {\n    return {\n      labels: [\n        \"16:17:30\",\n        \"16:17:40\",\n        \"16:17:50\",\n        \"16:18:00\",\n        \"16:18:10\",\n        \"16:18:20\",\n        \"16:18:30\",\n        \"16:18:40\",\n      ],\n      datasets: [\n        {\n          label: \"CSD-CPU\",\n          data: [0, 15, 10, 25, 40, 60, 65, 80],\n          borderColor: colors.theme[\"danger\"],\n          pointBackgroundColor: colors.theme[\"danger\"],\n        },\n        {\n          label: \"CSD-Memory\",\n          data: [0, 10, 5, 15, 30, 50, 70, 90],\n          borderColor: colors.theme[\"success\"],\n          pointBackgroundColor: colors.theme[\"success\"],\n        },\n      ],\n    };\n  },\n};\nlet chartExample4 = {\n  options: {\n    scales: {\n      yAxes: [\n        {\n          gridLines: {\n            color: colors.gray[900],\n            zeroLineColor: colors.gray[900],\n          },\n          ticks: {\n            callback: function (value) {\n              if (!(value % 10)) {\n                return value;\n              }\n            },\n          },\n        },\n      ],\n    },\n    tooltips: {\n      callbacks: {\n        label: function (item, data) {\n          var label = data.datasets[item.datasetIndex].label || \"\";\n          var yLabel = item.yLabel;\n          var content = \"\";\n\n          if (data.datasets.length > 1) {\n            content += label;\n          }\n\n          content += \" \" + yLabel + \"%\";\n          return content;\n        },\n      },\n    },\n  },\n  data: (canvas) => {\n    return {\n      labels: [\n        \"CPU\\nUsage\",\n        \"Memory\\nUsage\",\n        \"Network\\nRx\\nByte\",\n        \"Network\\nTx\\nByte\",\n        \"Time\",\n        \"Effect Percent\",\n      ],\n      datasets: [\n        {\n          label: \"CSD\",\n          data: [40, 86, 100, 100, 28],\n          maxBarThickness: 15,\n        },\n        {\n          label: \"SSD\",\n          data: [60, 14, 0, 0, 72],\n          maxBarThickness: 15,\n          backgroundColor: colors.theme[\"warning\"],\n        },\n        {\n          label: \"Effect Percent\",\n          data: [0, 0, 0, 0, 0, 155],\n          maxBarThickness: 15,\n          backgroundColor: colors.theme[\"danger\"],\n        },\n      ],\n    };\n  },\n};\nlet chartExample5 = {\n  options: {\n    legend: {\n      position: \"right\",\n    },\n    tooltips: {\n      callbacks: {\n        label: function (item, data) {\n          var label = data.labels[item.index] || \"\";\n          var content = \"\";\n\n          if (data.labels.length > 1) {\n            content += label;\n          }\n          content += \" \" + data.datasets[0].data[item.index] + \"%\";\n          return content;\n        },\n      },\n    },\n  },\n  data: (canvas) => {\n    return {\n      labels: [\"Aggregation\", \"Join\", \"SubQuery\", \"GroupBy\", \"OrderBy\"],\n      datasets: [\n        {\n          data: [10, 25, 25, 30, 10],\n          backgroundColor: [\n            colors.theme[\"danger\"],\n            colors.theme[\"warning\"],\n            colors.theme[\"success\"],\n            colors.theme[\"info\"],\n            colors.theme[\"primary\"],\n          ],\n        },\n      ],\n    };\n  },\n};\nmodule.exports = {\n  chartOptions, // used inside src/views/Index.js\n  parseOptions, // used inside src/views/Index.js\n  pushdownchart, // used inside src/views/Index.js\n  energychart, // used inside src/views/Index.js\n  chartExample3, // used inside src/views/Index.js\n  chartExample4, // used inside src/views/Index.js\n  chartExample5, // used inside src/views/Index.js\n};\n",{"ruleId":"344","severity":1,"message":"345","line":25,"column":3,"nodeType":"346","messageId":"347","endLine":25,"endColumn":7},{"ruleId":"344","severity":1,"message":"348","line":26,"column":3,"nodeType":"346","messageId":"347","endLine":26,"endColumn":12},{"ruleId":"344","severity":1,"message":"349","line":27,"column":3,"nodeType":"346","messageId":"347","endLine":27,"endColumn":18},{"ruleId":"344","severity":1,"message":"350","line":28,"column":3,"nodeType":"346","messageId":"347","endLine":28,"endColumn":17},{"ruleId":"344","severity":1,"message":"351","line":29,"column":3,"nodeType":"346","messageId":"347","endLine":29,"endColumn":8},{"ruleId":"344","severity":1,"message":"352","line":30,"column":3,"nodeType":"346","messageId":"347","endLine":30,"endColumn":13},{"ruleId":"353","severity":1,"message":"354","line":32,"column":17,"nodeType":"355","messageId":"356","endLine":36,"endColumn":18,"fix":"357","suppressions":"358"},{"ruleId":"344","severity":1,"message":"359","line":21,"column":10,"nodeType":"346","messageId":"347","endLine":21,"endColumn":19,"suppressions":"360"},{"ruleId":"344","severity":1,"message":"361","line":21,"column":31,"nodeType":"346","messageId":"347","endLine":21,"endColumn":34,"suppressions":"362"},{"ruleId":"344","severity":1,"message":"363","line":21,"column":36,"nodeType":"346","messageId":"347","endLine":21,"endColumn":43,"suppressions":"364"},{"ruleId":"344","severity":1,"message":"365","line":21,"column":45,"nodeType":"346","messageId":"347","endLine":21,"endColumn":52,"suppressions":"366"},{"ruleId":"344","severity":1,"message":"367","line":26,"column":3,"nodeType":"346","messageId":"347","endLine":26,"endColumn":9,"suppressions":"368"},{"ruleId":"344","severity":1,"message":"369","line":27,"column":3,"nodeType":"346","messageId":"347","endLine":27,"endColumn":7,"suppressions":"370"},{"ruleId":"344","severity":1,"message":"371","line":28,"column":3,"nodeType":"346","messageId":"347","endLine":28,"endColumn":13,"suppressions":"372"},{"ruleId":"344","severity":1,"message":"373","line":29,"column":3,"nodeType":"346","messageId":"347","endLine":29,"endColumn":11,"suppressions":"374"},{"ruleId":"344","severity":1,"message":"375","line":30,"column":3,"nodeType":"346","messageId":"347","endLine":30,"endColumn":12,"suppressions":"376"},{"ruleId":"344","severity":1,"message":"348","line":36,"column":3,"nodeType":"346","messageId":"347","endLine":36,"endColumn":12,"suppressions":"377"},{"ruleId":"344","severity":1,"message":"378","line":48,"column":3,"nodeType":"346","messageId":"347","endLine":48,"endColumn":11,"suppressions":"379"},{"ruleId":"344","severity":1,"message":"380","line":49,"column":3,"nodeType":"346","messageId":"347","endLine":49,"endColumn":8,"suppressions":"381"},{"ruleId":"344","severity":1,"message":"382","line":55,"column":5,"nodeType":"346","messageId":"347","endLine":55,"endColumn":7,"suppressions":"383"},{"ruleId":"344","severity":1,"message":"384","line":60,"column":9,"nodeType":"346","messageId":"347","endLine":60,"endColumn":20,"suppressions":"385"},{"ruleId":"344","severity":1,"message":"386","line":90,"column":11,"nodeType":"346","messageId":"347","endLine":90,"endColumn":18,"suppressions":"387"},{"ruleId":"344","severity":1,"message":"388","line":20,"column":8,"nodeType":"346","messageId":"347","endLine":20,"endColumn":16},{"ruleId":"344","severity":1,"message":"389","line":21,"column":8,"nodeType":"346","messageId":"347","endLine":21,"endColumn":13},{"ruleId":"390","severity":1,"message":"391","line":123,"column":9,"nodeType":"346","messageId":"392","endLine":123,"endColumn":15,"suppressions":"393"},{"ruleId":"344","severity":1,"message":"394","line":23,"column":8,"nodeType":"346","messageId":"347","endLine":23,"endColumn":19},{"ruleId":"344","severity":1,"message":"395","line":25,"column":8,"nodeType":"346","messageId":"347","endLine":25,"endColumn":15},{"ruleId":"344","severity":1,"message":"396","line":55,"column":9,"nodeType":"346","messageId":"347","endLine":55,"endColumn":21},{"ruleId":"353","severity":1,"message":"354","line":32,"column":17,"nodeType":"355","messageId":"356","endLine":36,"endColumn":18,"fix":"397","suppressions":"398"},{"ruleId":"344","severity":1,"message":"399","line":21,"column":3,"nodeType":"346","messageId":"347","endLine":21,"endColumn":15},{"ruleId":"344","severity":1,"message":"400","line":22,"column":3,"nodeType":"346","messageId":"347","endLine":22,"endColumn":15},{"ruleId":"344","severity":1,"message":"401","line":23,"column":3,"nodeType":"346","messageId":"347","endLine":23,"endColumn":23},{"ruleId":"344","severity":1,"message":"402","line":24,"column":3,"nodeType":"346","messageId":"347","endLine":24,"endColumn":17},{"ruleId":"344","severity":1,"message":"345","line":25,"column":3,"nodeType":"346","messageId":"347","endLine":25,"endColumn":7},{"ruleId":"344","severity":1,"message":"348","line":26,"column":3,"nodeType":"346","messageId":"347","endLine":26,"endColumn":12},{"ruleId":"344","severity":1,"message":"349","line":27,"column":3,"nodeType":"346","messageId":"347","endLine":27,"endColumn":18},{"ruleId":"344","severity":1,"message":"350","line":28,"column":3,"nodeType":"346","messageId":"347","endLine":28,"endColumn":17},{"ruleId":"344","severity":1,"message":"351","line":29,"column":3,"nodeType":"346","messageId":"347","endLine":29,"endColumn":8},{"ruleId":"344","severity":1,"message":"352","line":30,"column":3,"nodeType":"346","messageId":"347","endLine":30,"endColumn":13},{"ruleId":"344","severity":1,"message":"361","line":33,"column":3,"nodeType":"346","messageId":"347","endLine":33,"endColumn":6},{"ruleId":"344","severity":1,"message":"359","line":34,"column":3,"nodeType":"346","messageId":"347","endLine":34,"endColumn":12},{"ruleId":"344","severity":1,"message":"403","line":35,"column":3,"nodeType":"346","messageId":"347","endLine":35,"endColumn":8},{"ruleId":"344","severity":1,"message":"359","line":21,"column":10,"nodeType":"346","messageId":"347","endLine":21,"endColumn":19,"suppressions":"404"},{"ruleId":"344","severity":1,"message":"361","line":21,"column":31,"nodeType":"346","messageId":"347","endLine":21,"endColumn":34,"suppressions":"405"},{"ruleId":"344","severity":1,"message":"363","line":21,"column":36,"nodeType":"346","messageId":"347","endLine":21,"endColumn":43,"suppressions":"406"},{"ruleId":"344","severity":1,"message":"365","line":21,"column":45,"nodeType":"346","messageId":"347","endLine":21,"endColumn":52,"suppressions":"407"},{"ruleId":"344","severity":1,"message":"367","line":26,"column":3,"nodeType":"346","messageId":"347","endLine":26,"endColumn":9,"suppressions":"408"},{"ruleId":"344","severity":1,"message":"369","line":27,"column":3,"nodeType":"346","messageId":"347","endLine":27,"endColumn":7,"suppressions":"409"},{"ruleId":"344","severity":1,"message":"371","line":28,"column":3,"nodeType":"346","messageId":"347","endLine":28,"endColumn":13,"suppressions":"410"},{"ruleId":"344","severity":1,"message":"373","line":29,"column":3,"nodeType":"346","messageId":"347","endLine":29,"endColumn":11,"suppressions":"411"},{"ruleId":"344","severity":1,"message":"375","line":30,"column":3,"nodeType":"346","messageId":"347","endLine":30,"endColumn":12,"suppressions":"412"},{"ruleId":"344","severity":1,"message":"348","line":36,"column":3,"nodeType":"346","messageId":"347","endLine":36,"endColumn":12,"suppressions":"413"},{"ruleId":"344","severity":1,"message":"378","line":48,"column":3,"nodeType":"346","messageId":"347","endLine":48,"endColumn":11,"suppressions":"414"},{"ruleId":"344","severity":1,"message":"380","line":49,"column":3,"nodeType":"346","messageId":"347","endLine":49,"endColumn":8,"suppressions":"415"},{"ruleId":"344","severity":1,"message":"382","line":55,"column":5,"nodeType":"346","messageId":"347","endLine":55,"endColumn":7,"suppressions":"416"},{"ruleId":"344","severity":1,"message":"384","line":60,"column":9,"nodeType":"346","messageId":"347","endLine":60,"endColumn":20,"suppressions":"417"},{"ruleId":"344","severity":1,"message":"386","line":90,"column":11,"nodeType":"346","messageId":"347","endLine":90,"endColumn":18,"suppressions":"418"},{"ruleId":"344","severity":1,"message":"419","line":21,"column":10,"nodeType":"346","messageId":"347","endLine":21,"endColumn":14},{"ruleId":"344","severity":1,"message":"363","line":30,"column":3,"nodeType":"346","messageId":"347","endLine":30,"endColumn":10},{"ruleId":"344","severity":1,"message":"365","line":31,"column":3,"nodeType":"346","messageId":"347","endLine":31,"endColumn":10},{"ruleId":"344","severity":1,"message":"361","line":32,"column":3,"nodeType":"346","messageId":"347","endLine":32,"endColumn":6},{"ruleId":"344","severity":1,"message":"420","line":63,"column":13,"nodeType":"346","messageId":"347","endLine":63,"endColumn":21},{"ruleId":"344","severity":1,"message":"420","line":86,"column":13,"nodeType":"346","messageId":"347","endLine":86,"endColumn":21},{"ruleId":"344","severity":1,"message":"421","line":197,"column":10,"nodeType":"346","messageId":"347","endLine":197,"endColumn":16},{"ruleId":"344","severity":1,"message":"422","line":198,"column":21,"nodeType":"346","messageId":"347","endLine":198,"endColumn":33},{"ruleId":"344","severity":1,"message":"423","line":199,"column":23,"nodeType":"346","messageId":"347","endLine":199,"endColumn":37},{"ruleId":"344","severity":1,"message":"424","line":200,"column":22,"nodeType":"346","messageId":"347","endLine":200,"endColumn":35},{"ruleId":"344","severity":1,"message":"425","line":201,"column":19,"nodeType":"346","messageId":"347","endLine":201,"endColumn":29},{"ruleId":"344","severity":1,"message":"426","line":202,"column":19,"nodeType":"346","messageId":"347","endLine":202,"endColumn":29},{"ruleId":"344","severity":1,"message":"427","line":203,"column":10,"nodeType":"346","messageId":"347","endLine":203,"endColumn":18},{"ruleId":"344","severity":1,"message":"428","line":204,"column":10,"nodeType":"346","messageId":"347","endLine":204,"endColumn":18},{"ruleId":"344","severity":1,"message":"429","line":206,"column":10,"nodeType":"346","messageId":"347","endLine":206,"endColumn":18},{"ruleId":"344","severity":1,"message":"430","line":207,"column":10,"nodeType":"346","messageId":"347","endLine":207,"endColumn":14},{"ruleId":"344","severity":1,"message":"431","line":207,"column":16,"nodeType":"346","messageId":"347","endLine":207,"endColumn":23},{"ruleId":"344","severity":1,"message":"432","line":209,"column":10,"nodeType":"346","messageId":"347","endLine":209,"endColumn":17},{"ruleId":"344","severity":1,"message":"433","line":214,"column":10,"nodeType":"346","messageId":"347","endLine":214,"endColumn":31},{"ruleId":"344","severity":1,"message":"434","line":214,"column":33,"nodeType":"346","messageId":"347","endLine":214,"endColumn":57},{"ruleId":"344","severity":1,"message":"435","line":215,"column":10,"nodeType":"346","messageId":"347","endLine":215,"endColumn":35},{"ruleId":"344","severity":1,"message":"436","line":215,"column":37,"nodeType":"346","messageId":"347","endLine":215,"endColumn":65},{"ruleId":"344","severity":1,"message":"437","line":216,"column":10,"nodeType":"346","messageId":"347","endLine":216,"endColumn":25},{"ruleId":"344","severity":1,"message":"438","line":216,"column":27,"nodeType":"346","messageId":"347","endLine":216,"endColumn":45},{"ruleId":"344","severity":1,"message":"439","line":217,"column":10,"nodeType":"346","messageId":"347","endLine":217,"endColumn":15},{"ruleId":"344","severity":1,"message":"440","line":217,"column":17,"nodeType":"346","messageId":"347","endLine":217,"endColumn":25},{"ruleId":"344","severity":1,"message":"441","line":218,"column":10,"nodeType":"346","messageId":"347","endLine":218,"endColumn":21},{"ruleId":"344","severity":1,"message":"442","line":218,"column":23,"nodeType":"346","messageId":"347","endLine":218,"endColumn":37},{"ruleId":"344","severity":1,"message":"443","line":219,"column":10,"nodeType":"346","messageId":"347","endLine":219,"endColumn":28},{"ruleId":"344","severity":1,"message":"444","line":219,"column":30,"nodeType":"346","messageId":"347","endLine":219,"endColumn":51},{"ruleId":"445","severity":1,"message":"446","line":222,"column":54,"nodeType":"447","messageId":"448","endLine":222,"endColumn":63},{"ruleId":"344","severity":1,"message":"449","line":257,"column":10,"nodeType":"346","messageId":"347","endLine":257,"endColumn":19},{"ruleId":"344","severity":1,"message":"450","line":258,"column":10,"nodeType":"346","messageId":"347","endLine":258,"endColumn":20},{"ruleId":"344","severity":1,"message":"451","line":259,"column":9,"nodeType":"346","messageId":"347","endLine":259,"endColumn":19},{"ruleId":"344","severity":1,"message":"452","line":263,"column":9,"nodeType":"346","messageId":"347","endLine":263,"endColumn":20},{"ruleId":"344","severity":1,"message":"453","line":267,"column":9,"nodeType":"346","messageId":"347","endLine":267,"endColumn":20},{"ruleId":"344","severity":1,"message":"454","line":270,"column":9,"nodeType":"346","messageId":"347","endLine":270,"endColumn":22},{"ruleId":"344","severity":1,"message":"455","line":273,"column":9,"nodeType":"346","messageId":"347","endLine":273,"endColumn":20},{"ruleId":"344","severity":1,"message":"456","line":276,"column":9,"nodeType":"346","messageId":"347","endLine":276,"endColumn":17},{"ruleId":"344","severity":1,"message":"457","line":317,"column":9,"nodeType":"346","messageId":"347","endLine":317,"endColumn":21},{"ruleId":"344","severity":1,"message":"458","line":321,"column":9,"nodeType":"346","messageId":"347","endLine":321,"endColumn":25},{"ruleId":"459","severity":1,"message":"460","line":349,"column":5,"nodeType":"461","messageId":"462","endLine":439,"endColumn":6},{"ruleId":"344","severity":1,"message":"463","line":23,"column":25,"nodeType":"346","messageId":"347","endLine":23,"endColumn":28},{"ruleId":"344","severity":1,"message":"464","line":30,"column":3,"nodeType":"346","messageId":"347","endLine":30,"endColumn":8},{"ruleId":"344","severity":1,"message":"465","line":60,"column":10,"nodeType":"346","messageId":"347","endLine":60,"endColumn":23},{"ruleId":"344","severity":1,"message":"466","line":116,"column":10,"nodeType":"346","messageId":"347","endLine":116,"endColumn":19},{"ruleId":"344","severity":1,"message":"467","line":157,"column":9,"nodeType":"346","messageId":"347","endLine":157,"endColumn":31},{"ruleId":"344","severity":1,"message":"456","line":239,"column":9,"nodeType":"346","messageId":"347","endLine":239,"endColumn":17},{"ruleId":"344","severity":1,"message":"468","line":272,"column":10,"nodeType":"346","messageId":"347","endLine":272,"endColumn":17},{"ruleId":"459","severity":1,"message":"460","line":285,"column":5,"nodeType":"461","messageId":"462","endLine":373,"endColumn":6},{"ruleId":"469","severity":1,"message":"470","line":519,"column":17,"nodeType":"355","endLine":519,"endColumn":45},{"ruleId":"344","severity":1,"message":"359","line":22,"column":10,"nodeType":"346","messageId":"347","endLine":22,"endColumn":19},{"ruleId":"344","severity":1,"message":"471","line":22,"column":21,"nodeType":"346","messageId":"347","endLine":22,"endColumn":24},{"ruleId":"344","severity":1,"message":"472","line":22,"column":26,"nodeType":"346","messageId":"347","endLine":22,"endColumn":29},{"ruleId":"344","severity":1,"message":"473","line":23,"column":7,"nodeType":"346","messageId":"347","endLine":23,"endColumn":14},{"ruleId":"344","severity":1,"message":"474","line":57,"column":7,"nodeType":"346","messageId":"347","endLine":57,"endColumn":11},{"ruleId":"344","severity":1,"message":"475","line":60,"column":10,"nodeType":"346","messageId":"347","endLine":60,"endColumn":20},{"ruleId":"344","severity":1,"message":"476","line":65,"column":9,"nodeType":"346","messageId":"347","endLine":65,"endColumn":26},{"ruleId":"344","severity":1,"message":"477","line":689,"column":5,"nodeType":"346","messageId":"347","endLine":689,"endColumn":17},{"ruleId":"390","severity":1,"message":"391","line":123,"column":9,"nodeType":"346","messageId":"392","endLine":123,"endColumn":15,"suppressions":"478"},"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'FormGroup' is defined but never used.","'InputGroupAddon' is defined but never used.","'InputGroupText' is defined but never used.","'Input' is defined but never used.","'InputGroup' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"479","text":"480"},["481"],"'Container' is defined but never used.",["482"],"'Nav' is defined but never used.",["483"],"'NavItem' is defined but never used.",["484"],"'NavLink' is defined but never used.",["485"],"'Button' is defined but never used.",["486"],"'Card' is defined but never used.",["487"],"'CardHeader' is defined but never used.",["488"],"'CardBody' is defined but never used.",["489"],"'CardTitle' is defined but never used.",["490"],["491"],"'Progress' is defined but never used.",["492"],"'Table' is defined but never used.",["493"],"'ps' is defined but never used.",["494"],"'activeRoute' is assigned a value but never used.",["495"],"'bgColor' is assigned a value but never used.",["496"],"'Register' is defined but never used.","'Login' is defined but never used.","no-redeclare","'radius' is already defined.","redeclared",["497"],"'AdminNavbar' is defined but never used.","'Sidebar' is defined but never used.","'getBrandText' is assigned a value but never used.",{"range":"498","text":"480"},["499"],"'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'Media' is defined but never used.",["500"],["501"],["502"],["503"],["504"],["505"],["506"],["507"],["508"],["509"],["510"],["511"],["512"],["513"],["514"],"'Link' is defined but never used.","'response' is assigned a value but never used.","'source' is assigned a value but never used.","'setTableName' is assigned a value but never used.","'setWhereClause' is assigned a value but never used.","'setColumnName' is assigned a value but never used.","'setOrderBy' is assigned a value but never used.","'setGroupBy' is assigned a value but never used.","'analysis' is assigned a value but never used.","'template' is assigned a value but never used.","'generate' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'snippet' is assigned a value but never used.","'CSDEnergyUsageForcast' is assigned a value but never used.","'setCSDEnergyUsageForcast' is assigned a value but never used.","'conservationEffectForcast' is assigned a value but never used.","'setConservationEffectForcast' is assigned a value but never used.","'efficientOption' is assigned a value but never used.","'setEfficientOption' is assigned a value but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'energyUsage' is assigned a value but never used.","'setEnergyUsage' is assigned a value but never used.","'conservationEffect' is assigned a value but never used.","'setConservationEffect' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'activeNav' is assigned a value but never used.","'activeNav2' is assigned a value but never used.","'toggleNavs' is assigned a value but never used.","'toggleNavs2' is assigned a value but never used.","'changeImage' is assigned a value but never used.","'analysisQuery' is assigned a value but never used.","'generateAPI' is assigned a value but never used.","'showTemp' is assigned a value but never used.","'handleToggle' is assigned a value but never used.","'handleInputValue' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Pie' is defined but never used.","'Badge' is defined but never used.","'chartExample5' is defined but never used.","'loginData' is assigned a value but never used.","'handleEffectCheckClick' is assigned a value but never used.","'fileSys' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Row' is defined but never used.","'Col' is defined but never used.","'TabMenu' is assigned a value but never used.","'Desc' is assigned a value but never used.","'currentTab' is assigned a value but never used.","'selectMenuHandler' is assigned a value but never used.","'energy2chart' is assigned a value but never used.",["515"],[1232,1232]," rel=\"noreferrer\"",{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},[1232,1232],{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},{"kind":"516","justification":"517"},"directive",""]